// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.reteno.reteno_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class NativeInAppMessageStatus(val raw: Int) {
  IN_APP_SHOULD_BE_DISPLAYED(0),
  IN_APP_IS_DISPLAYED(1),
  IN_APP_SHOULD_BE_CLOSED(2),
  IN_APP_IS_CLOSED(3),
  IN_APP_RECEIVED_ERROR(4);

  companion object {
    fun ofRaw(raw: Int): NativeInAppMessageStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NativeRecomEventType(val raw: Int) {
  IMPRESSION(0),
  CLICK(1);

  companion object {
    fun ofRaw(raw: Int): NativeRecomEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRetenoUser (
  val userAttributes: NativeUserAttributes? = null,
  val subscriptionKeys: List<String?>? = null,
  val groupNamesInclude: List<String?>? = null,
  val groupNamesExclude: List<String?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeRetenoUser {
      val userAttributes = __pigeon_list[0] as NativeUserAttributes?
      val subscriptionKeys = __pigeon_list[1] as List<String?>?
      val groupNamesInclude = __pigeon_list[2] as List<String?>?
      val groupNamesExclude = __pigeon_list[3] as List<String?>?
      return NativeRetenoUser(userAttributes, subscriptionKeys, groupNamesInclude, groupNamesExclude)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userAttributes,
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserAttributes (
  val phone: String? = null,
  val email: String? = null,
  val firstName: String? = null,
  val lastName: String? = null,
  val languageCode: String? = null,
  val timeZone: String? = null,
  val address: NativeAddress? = null,
  val fields: List<NativeUserCustomField?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeUserAttributes {
      val phone = __pigeon_list[0] as String?
      val email = __pigeon_list[1] as String?
      val firstName = __pigeon_list[2] as String?
      val lastName = __pigeon_list[3] as String?
      val languageCode = __pigeon_list[4] as String?
      val timeZone = __pigeon_list[5] as String?
      val address = __pigeon_list[6] as NativeAddress?
      val fields = __pigeon_list[7] as List<NativeUserCustomField?>?
      return NativeUserAttributes(phone, email, firstName, lastName, languageCode, timeZone, address, fields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAddress (
  val region: String? = null,
  val town: String? = null,
  val address: String? = null,
  val postcode: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeAddress {
      val region = __pigeon_list[0] as String?
      val town = __pigeon_list[1] as String?
      val address = __pigeon_list[2] as String?
      val postcode = __pigeon_list[3] as String?
      return NativeAddress(region, town, address, postcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      region,
      town,
      address,
      postcode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserCustomField (
  val key: String,
  val value: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeUserCustomField {
      val key = __pigeon_list[0] as String
      val value = __pigeon_list[1] as String?
      return NativeUserCustomField(key, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAnonymousUserAttributes (
  val firstName: String? = null,
  val lastName: String? = null,
  val languageCode: String? = null,
  val timeZone: String? = null,
  val address: NativeAddress? = null,
  val fields: List<NativeUserCustomField?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeAnonymousUserAttributes {
      val firstName = __pigeon_list[0] as String?
      val lastName = __pigeon_list[1] as String?
      val languageCode = __pigeon_list[2] as String?
      val timeZone = __pigeon_list[3] as String?
      val address = __pigeon_list[4] as NativeAddress?
      val fields = __pigeon_list[5] as List<NativeUserCustomField?>?
      return NativeAnonymousUserAttributes(firstName, lastName, languageCode, timeZone, address, fields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeCustomEvent (
  val eventTypeKey: String,
  val dateOccurred: String,
  val parameters: List<NativeCustomEventParameter?>,
  val forcePush: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeCustomEvent {
      val eventTypeKey = __pigeon_list[0] as String
      val dateOccurred = __pigeon_list[1] as String
      val parameters = __pigeon_list[2] as List<NativeCustomEventParameter?>
      val forcePush = __pigeon_list[3] as Boolean
      return NativeCustomEvent(eventTypeKey, dateOccurred, parameters, forcePush)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeCustomEventParameter (
  val name: String,
  val value: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeCustomEventParameter {
      val name = __pigeon_list[0] as String
      val value = __pigeon_list[1] as String?
      return NativeCustomEventParameter(name, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeInAppMessageAction (
  val isCloseButtonClicked: Boolean,
  val isButtonClicked: Boolean,
  val isOpenUrlClicked: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeInAppMessageAction {
      val isCloseButtonClicked = __pigeon_list[0] as Boolean
      val isButtonClicked = __pigeon_list[1] as Boolean
      val isOpenUrlClicked = __pigeon_list[2] as Boolean
      return NativeInAppMessageAction(isCloseButtonClicked, isButtonClicked, isOpenUrlClicked)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRecomFilter (
  val name: String,
  val values: List<String?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeRecomFilter {
      val name = __pigeon_list[0] as String
      val values = __pigeon_list[1] as List<String?>
      return NativeRecomFilter(name, values)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      values,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRecommendation (
  val productId: String,
  val name: String? = null,
  val description: String? = null,
  val imageUrl: String? = null,
  val price: Double? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeRecommendation {
      val productId = __pigeon_list[0] as String
      val name = __pigeon_list[1] as String?
      val description = __pigeon_list[2] as String?
      val imageUrl = __pigeon_list[3] as String?
      val price = __pigeon_list[4] as Double?
      return NativeRecommendation(productId, name, description, imageUrl, price)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      productId,
      name,
      description,
      imageUrl,
      price,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRecomEvent (
  val eventType: NativeRecomEventType,
  val dateOccurred: String,
  val productId: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeRecomEvent {
      val eventType = NativeRecomEventType.ofRaw(__pigeon_list[0] as Int)!!
      val dateOccurred = __pigeon_list[1] as String
      val productId = __pigeon_list[2] as String
      return NativeRecomEvent(eventType, dateOccurred, productId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      eventType.raw,
      dateOccurred,
      productId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRecomEvents (
  val recomVariantId: String,
  val events: List<NativeRecomEvent?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeRecomEvents {
      val recomVariantId = __pigeon_list[0] as String
      val events = __pigeon_list[1] as List<NativeRecomEvent?>
      return NativeRecomEvents(recomVariantId, events)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      recomVariantId,
      events,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLifecycleTrackingOptions (
  val appLifecycleEnabled: Boolean,
  val pushSubscriptionEnabled: Boolean,
  val sessionEventsEnabled: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeLifecycleTrackingOptions {
      val appLifecycleEnabled = __pigeon_list[0] as Boolean
      val pushSubscriptionEnabled = __pigeon_list[1] as Boolean
      val sessionEventsEnabled = __pigeon_list[2] as Boolean
      return NativeLifecycleTrackingOptions(appLifecycleEnabled, pushSubscriptionEnabled, sessionEventsEnabled)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      appLifecycleEnabled,
      pushSubscriptionEnabled,
      sessionEventsEnabled,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAppInboxMessages (
  val messages: List<NativeAppInboxMessage?>,
  val totalPages: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeAppInboxMessages {
      val messages = __pigeon_list[0] as List<NativeAppInboxMessage?>
      val totalPages = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return NativeAppInboxMessages(messages, totalPages)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      messages,
      totalPages,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAppInboxMessage (
  val id: String,
  val title: String,
  val createdDate: String,
  val isNewMessage: Boolean,
  val content: String? = null,
  val imageUrl: String? = null,
  val linkUrl: String? = null,
  val category: String? = null,
  val customData: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeAppInboxMessage {
      val id = __pigeon_list[0] as String
      val title = __pigeon_list[1] as String
      val createdDate = __pigeon_list[2] as String
      val isNewMessage = __pigeon_list[3] as Boolean
      val content = __pigeon_list[4] as String?
      val imageUrl = __pigeon_list[5] as String?
      val linkUrl = __pigeon_list[6] as String?
      val category = __pigeon_list[7] as String?
      val customData = __pigeon_list[8] as Map<String?, Any?>?
      return NativeAppInboxMessage(id, title, createdDate, isNewMessage, content, imageUrl, linkUrl, category, customData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      title,
      createdDate,
      isNewMessage,
      content,
      imageUrl,
      linkUrl,
      category,
      customData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserNotificationAction (
  val actionId: String? = null,
  val customData: Map<String?, Any?>? = null,
  val link: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeUserNotificationAction {
      val actionId = __pigeon_list[0] as String?
      val customData = __pigeon_list[1] as Map<String?, Any?>?
      val link = __pigeon_list[2] as String?
      return NativeUserNotificationAction(actionId, customData, link)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      actionId,
      customData,
      link,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEcommerceProduct (
  val productId: String,
  val price: Double,
  val inStock: Boolean,
  val attributes: Map<String?, List<String>?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeEcommerceProduct {
      val productId = __pigeon_list[0] as String
      val price = __pigeon_list[1] as Double
      val inStock = __pigeon_list[2] as Boolean
      val attributes = __pigeon_list[3] as Map<String?, List<String>?>?
      return NativeEcommerceProduct(productId, price, inStock, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      productId,
      price,
      inStock,
      attributes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEcommerceCategory (
  val productCategoryId: String,
  val attributes: Map<String?, List<String>?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeEcommerceCategory {
      val productCategoryId = __pigeon_list[0] as String
      val attributes = __pigeon_list[1] as Map<String?, List<String>?>?
      return NativeEcommerceCategory(productCategoryId, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      productCategoryId,
      attributes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEcommerceProductInCart (
  val productId: String,
  val price: Double,
  val quantity: Long,
  val discount: Double? = null,
  val name: String? = null,
  val category: String? = null,
  val attributes: Map<String?, List<String>?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeEcommerceProductInCart {
      val productId = __pigeon_list[0] as String
      val price = __pigeon_list[1] as Double
      val quantity = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val discount = __pigeon_list[3] as Double?
      val name = __pigeon_list[4] as String?
      val category = __pigeon_list[5] as String?
      val attributes = __pigeon_list[6] as Map<String?, List<String>?>?
      return NativeEcommerceProductInCart(productId, price, quantity, discount, name, category, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      productId,
      price,
      quantity,
      discount,
      name,
      category,
      attributes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEcommerceItem (
  val externalItemId: String,
  val name: String,
  val category: String,
  val quantity: Double,
  val cost: Double,
  val url: String,
  val imageUrl: String? = null,
  val description: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeEcommerceItem {
      val externalItemId = __pigeon_list[0] as String
      val name = __pigeon_list[1] as String
      val category = __pigeon_list[2] as String
      val quantity = __pigeon_list[3] as Double
      val cost = __pigeon_list[4] as Double
      val url = __pigeon_list[5] as String
      val imageUrl = __pigeon_list[6] as String?
      val description = __pigeon_list[7] as String?
      return NativeEcommerceItem(externalItemId, name, category, quantity, cost, url, imageUrl, description)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      externalItemId,
      name,
      category,
      quantity,
      cost,
      url,
      imageUrl,
      description,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEcommerceOrder (
  val externalOrderId: String,
  val totalCost: Double,
  val status: String,
  val date: String,
  val cartId: String? = null,
  val email: String? = null,
  val phone: String? = null,
  val firstName: String? = null,
  val lastName: String? = null,
  val shipping: Double? = null,
  val discount: Double? = null,
  val taxes: Double? = null,
  val restoreUrl: String? = null,
  val statusDescription: String? = null,
  val storeId: String? = null,
  val source: String? = null,
  val deliveryMethod: String? = null,
  val paymentMethod: String? = null,
  val deliveryAddress: String? = null,
  val items: List<NativeEcommerceItem?>? = null,
  val attributes: Map<String?, List<String>?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NativeEcommerceOrder {
      val externalOrderId = __pigeon_list[0] as String
      val totalCost = __pigeon_list[1] as Double
      val status = __pigeon_list[2] as String
      val date = __pigeon_list[3] as String
      val cartId = __pigeon_list[4] as String?
      val email = __pigeon_list[5] as String?
      val phone = __pigeon_list[6] as String?
      val firstName = __pigeon_list[7] as String?
      val lastName = __pigeon_list[8] as String?
      val shipping = __pigeon_list[9] as Double?
      val discount = __pigeon_list[10] as Double?
      val taxes = __pigeon_list[11] as Double?
      val restoreUrl = __pigeon_list[12] as String?
      val statusDescription = __pigeon_list[13] as String?
      val storeId = __pigeon_list[14] as String?
      val source = __pigeon_list[15] as String?
      val deliveryMethod = __pigeon_list[16] as String?
      val paymentMethod = __pigeon_list[17] as String?
      val deliveryAddress = __pigeon_list[18] as String?
      val items = __pigeon_list[19] as List<NativeEcommerceItem?>?
      val attributes = __pigeon_list[20] as Map<String?, List<String>?>?
      return NativeEcommerceOrder(externalOrderId, totalCost, status, date, cartId, email, phone, firstName, lastName, shipping, discount, taxes, restoreUrl, statusDescription, storeId, source, deliveryMethod, paymentMethod, deliveryAddress, items, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      externalOrderId,
      totalCost,
      status,
      date,
      cartId,
      email,
      phone,
      firstName,
      lastName,
      shipping,
      discount,
      taxes,
      restoreUrl,
      statusDescription,
      storeId,
      source,
      deliveryMethod,
      paymentMethod,
      deliveryAddress,
      items,
      attributes,
    )
  }
}

private object RetenoHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAddress.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAnonymousUserAttributes.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAppInboxMessage.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAppInboxMessages.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEvent.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEventParameter.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceCategory.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceItem.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceOrder.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceProduct.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceProductInCart.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeInAppMessageAction.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLifecycleTrackingOptions.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomEvent.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomEvents.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomFilter.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecommendation.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRetenoUser.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserAttributes.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserCustomField.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserNotificationAction.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAddress -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAnonymousUserAttributes -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeAppInboxMessage -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeAppInboxMessages -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeCustomEvent -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeCustomEventParameter -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceCategory -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceItem -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceOrder -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceProduct -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceProductInCart -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NativeInAppMessageAction -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is NativeLifecycleTrackingOptions -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is NativeRecomEvent -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is NativeRecomEvents -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is NativeRecomFilter -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is NativeRecommendation -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is NativeRetenoUser -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is NativeUserAttributes -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is NativeUserCustomField -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is NativeUserNotificationAction -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface RetenoHostApi {
  fun initWith(accessKey: String, lifecycleTrackingOptions: NativeLifecycleTrackingOptions?, isPausedInAppMessages: Boolean, useCustomDeviceIdProvider: Boolean)
  fun setUserAttributes(externalUserId: String, user: NativeRetenoUser?)
  fun setAnonymousUserAttributes(anonymousUserAttributes: NativeAnonymousUserAttributes)
  fun logEvent(event: NativeCustomEvent)
  fun updatePushPermissionStatus()
  fun pauseInAppMessages(isPaused: Boolean)
  fun getInitialNotification(): Map<String, Any>?
  fun getRecommendations(recomVariantId: String, productIds: List<String>, categoryId: String, filters: List<NativeRecomFilter>?, fields: List<String>?, callback: (Result<List<NativeRecommendation>>) -> Unit)
  fun logRecommendationsEvent(events: NativeRecomEvents)
  fun getAppInboxMessages(page: Long?, pageSize: Long?, callback: (Result<NativeAppInboxMessages>) -> Unit)
  fun getAppInboxMessagesCount(callback: (Result<Long>) -> Unit)
  fun markAsOpened(messageId: String)
  fun markAllMessagesAsOpened(callback: (Result<Unit>) -> Unit)
  fun subscribeOnMessagesCountChanged()
  fun unsubscribeAllMessagesCountChanged()
  fun logEcommerceProductViewed(product: NativeEcommerceProduct, currency: String?)
  fun logEcommerceProductCategoryViewed(category: NativeEcommerceCategory)
  fun logEcommerceProductAddedToWishlist(product: NativeEcommerceProduct, currency: String?)
  fun logEcommerceCartUpdated(cartId: String, products: List<NativeEcommerceProductInCart>, currency: String?)
  fun logEcommerceOrderCreated(order: NativeEcommerceOrder, currency: String?)
  fun logEcommerceOrderUpdated(order: NativeEcommerceOrder, currency: String?)
  fun logEcommerceOrderDelivered(externalOrderId: String)
  fun logEcommerceOrderCancelled(externalOrderId: String)
  fun logEcommerceSearchRequest(query: String, isFound: Boolean?)

  companion object {
    /** The codec used by RetenoHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      RetenoHostApiCodec
    }
    /** Sets up an instance of `RetenoHostApi` to handle messages through the `binaryMessenger`. */
    fun setUp(binaryMessenger: BinaryMessenger, api: RetenoHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.initWith$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val accessKeyArg = args[0] as String
            val lifecycleTrackingOptionsArg = args[1] as NativeLifecycleTrackingOptions?
            val isPausedInAppMessagesArg = args[2] as Boolean
            val useCustomDeviceIdProviderArg = args[3] as Boolean
            val wrapped: List<Any?> = try {
              api.initWith(accessKeyArg, lifecycleTrackingOptionsArg, isPausedInAppMessagesArg, useCustomDeviceIdProviderArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val externalUserIdArg = args[0] as String
            val userArg = args[1] as NativeRetenoUser?
            val wrapped: List<Any?> = try {
              api.setUserAttributes(externalUserIdArg, userArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val anonymousUserAttributesArg = args[0] as NativeAnonymousUserAttributes
            val wrapped: List<Any?> = try {
              api.setAnonymousUserAttributes(anonymousUserAttributesArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventArg = args[0] as NativeCustomEvent
            val wrapped: List<Any?> = try {
              api.logEvent(eventArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.updatePushPermissionStatus()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val isPausedArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.pauseInAppMessages(isPausedArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getInitialNotification())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getRecommendations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val recomVariantIdArg = args[0] as String
            val productIdsArg = args[1] as List<String>
            val categoryIdArg = args[2] as String
            val filtersArg = args[3] as List<NativeRecomFilter>?
            val fieldsArg = args[4] as List<String>?
            api.getRecommendations(recomVariantIdArg, productIdsArg, categoryIdArg, filtersArg, fieldsArg) { result: Result<List<NativeRecommendation>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logRecommendationsEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventsArg = args[0] as NativeRecomEvents
            val wrapped: List<Any?> = try {
              api.logRecommendationsEvent(eventsArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pageArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long? }
            val pageSizeArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long? }
            api.getAppInboxMessages(pageArg, pageSizeArg) { result: Result<NativeAppInboxMessages> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessagesCount$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAppInboxMessagesCount() { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAsOpened$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val messageIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.markAsOpened(messageIdArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAllMessagesAsOpened$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.markAllMessagesAsOpened() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.subscribeOnMessagesCountChanged$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.subscribeOnMessagesCountChanged()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.unsubscribeAllMessagesCountChanged$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.unsubscribeAllMessagesCountChanged()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductViewed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val productArg = args[0] as NativeEcommerceProduct
            val currencyArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.logEcommerceProductViewed(productArg, currencyArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductCategoryViewed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val categoryArg = args[0] as NativeEcommerceCategory
            val wrapped: List<Any?> = try {
              api.logEcommerceProductCategoryViewed(categoryArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductAddedToWishlist$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val productArg = args[0] as NativeEcommerceProduct
            val currencyArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.logEcommerceProductAddedToWishlist(productArg, currencyArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceCartUpdated$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val cartIdArg = args[0] as String
            val productsArg = args[1] as List<NativeEcommerceProductInCart>
            val currencyArg = args[2] as String?
            val wrapped: List<Any?> = try {
              api.logEcommerceCartUpdated(cartIdArg, productsArg, currencyArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCreated$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val orderArg = args[0] as NativeEcommerceOrder
            val currencyArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.logEcommerceOrderCreated(orderArg, currencyArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderUpdated$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val orderArg = args[0] as NativeEcommerceOrder
            val currencyArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.logEcommerceOrderUpdated(orderArg, currencyArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderDelivered$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val externalOrderIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.logEcommerceOrderDelivered(externalOrderIdArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCancelled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val externalOrderIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.logEcommerceOrderCancelled(externalOrderIdArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceSearchRequest$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val queryArg = args[0] as String
            val isFoundArg = args[1] as Boolean?
            val wrapped: List<Any?> = try {
              api.logEcommerceSearchRequest(queryArg, isFoundArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
private object RetenoFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAddress.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAnonymousUserAttributes.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAppInboxMessage.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAppInboxMessages.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEvent.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEventParameter.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceCategory.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceItem.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceOrder.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceProduct.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEcommerceProductInCart.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeInAppMessageAction.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLifecycleTrackingOptions.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomEvent.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomEvents.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecomFilter.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRecommendation.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRetenoUser.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserAttributes.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserCustomField.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserNotificationAction.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAddress -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAnonymousUserAttributes -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeAppInboxMessage -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeAppInboxMessages -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeCustomEvent -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeCustomEventParameter -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceCategory -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceItem -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceOrder -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceProduct -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is NativeEcommerceProductInCart -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NativeInAppMessageAction -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is NativeLifecycleTrackingOptions -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is NativeRecomEvent -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is NativeRecomEvents -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is NativeRecomFilter -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is NativeRecommendation -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is NativeRetenoUser -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is NativeUserAttributes -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is NativeUserCustomField -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is NativeUserNotificationAction -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class RetenoFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by RetenoFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      RetenoFlutterApiCodec
    }
  }
  fun onNotificationReceived(payloadArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(payloadArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onNotificationClicked(payloadArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(payloadArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onNotificationActionHandler(actionArg: NativeUserNotificationAction, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(actionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onInAppMessageStatusChanged(statusArg: NativeInAppMessageStatus, actionArg: NativeInAppMessageAction?, errorArg: String?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(statusArg.raw, actionArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onMessagesCountChanged(countArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(countArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun getDeviceId(callback: (Result<String?>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.getDeviceId$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          val output = it[0] as String?
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
