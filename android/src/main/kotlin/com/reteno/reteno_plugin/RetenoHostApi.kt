// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.reteno.reteno_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class NativeInAppMessageStatus(val raw: Int) {
  IN_APP_SHOULD_BE_DISPLAYED(0),
  IN_APP_IS_DISPLAYED(1),
  IN_APP_SHOULD_BE_CLOSED(2),
  IN_APP_IS_CLOSED(3),
  IN_APP_RECEIVED_ERROR(4);

  companion object {
    fun ofRaw(raw: Int): NativeInAppMessageStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeRetenoUser (
  val userAttributes: NativeUserAttributes? = null,
  val subscriptionKeys: List<String?>? = null,
  val groupNamesInclude: List<String?>? = null,
  val groupNamesExclude: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeRetenoUser {
      val userAttributes: NativeUserAttributes? = (list[0] as List<Any?>?)?.let {
        NativeUserAttributes.fromList(it)
      }
      val subscriptionKeys = list[1] as List<String?>?
      val groupNamesInclude = list[2] as List<String?>?
      val groupNamesExclude = list[3] as List<String?>?
      return NativeRetenoUser(userAttributes, subscriptionKeys, groupNamesInclude, groupNamesExclude)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userAttributes?.toList(),
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserAttributes (
  val phone: String? = null,
  val email: String? = null,
  val firstName: String? = null,
  val lastName: String? = null,
  val languageCode: String? = null,
  val timeZone: String? = null,
  val address: NativeAddress? = null,
  val fields: List<NativeUserCustomField?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserAttributes {
      val phone = list[0] as String?
      val email = list[1] as String?
      val firstName = list[2] as String?
      val lastName = list[3] as String?
      val languageCode = list[4] as String?
      val timeZone = list[5] as String?
      val address: NativeAddress? = (list[6] as List<Any?>?)?.let {
        NativeAddress.fromList(it)
      }
      val fields = list[7] as List<NativeUserCustomField?>?
      return NativeUserAttributes(phone, email, firstName, lastName, languageCode, timeZone, address, fields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.toList(),
      fields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAddress (
  val region: String? = null,
  val town: String? = null,
  val address: String? = null,
  val postcode: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAddress {
      val region = list[0] as String?
      val town = list[1] as String?
      val address = list[2] as String?
      val postcode = list[3] as String?
      return NativeAddress(region, town, address, postcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      region,
      town,
      address,
      postcode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserCustomField (
  val key: String,
  val value: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserCustomField {
      val key = list[0] as String
      val value = list[1] as String?
      return NativeUserCustomField(key, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAnonymousUserAttributes (
  val firstName: String? = null,
  val lastName: String? = null,
  val languageCode: String? = null,
  val timeZone: String? = null,
  val address: NativeAddress? = null,
  val fields: List<NativeUserCustomField?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAnonymousUserAttributes {
      val firstName = list[0] as String?
      val lastName = list[1] as String?
      val languageCode = list[2] as String?
      val timeZone = list[3] as String?
      val address: NativeAddress? = (list[4] as List<Any?>?)?.let {
        NativeAddress.fromList(it)
      }
      val fields = list[5] as List<NativeUserCustomField?>?
      return NativeAnonymousUserAttributes(firstName, lastName, languageCode, timeZone, address, fields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.toList(),
      fields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeCustomEvent (
  val eventTypeKey: String,
  val dateOccurred: String,
  val parameters: List<NativeCustomEventParameter?>,
  val forcePush: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeCustomEvent {
      val eventTypeKey = list[0] as String
      val dateOccurred = list[1] as String
      val parameters = list[2] as List<NativeCustomEventParameter?>
      val forcePush = list[3] as Boolean
      return NativeCustomEvent(eventTypeKey, dateOccurred, parameters, forcePush)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeCustomEventParameter (
  val name: String,
  val value: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeCustomEventParameter {
      val name = list[0] as String
      val value = list[1] as String?
      return NativeCustomEventParameter(name, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeInAppMessageAction (
  val isCloseButtonClicked: Boolean,
  val isButtonClicked: Boolean,
  val isOpenUrlClicked: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeInAppMessageAction {
      val isCloseButtonClicked = list[0] as Boolean
      val isButtonClicked = list[1] as Boolean
      val isOpenUrlClicked = list[2] as Boolean
      return NativeInAppMessageAction(isCloseButtonClicked, isButtonClicked, isOpenUrlClicked)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object RetenoHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAddress.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAnonymousUserAttributes.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEvent.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEventParameter.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeInAppMessageAction.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRetenoUser.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserAttributes.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserCustomField.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAddress -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAnonymousUserAttributes -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeCustomEvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeCustomEventParameter -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeInAppMessageAction -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeRetenoUser -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeUserAttributes -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeUserCustomField -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface RetenoHostApi {
  fun setUserAttributes(externalUserId: String, user: NativeRetenoUser?)
  fun setAnonymousUserAttributes(anonymousUserAttributes: NativeAnonymousUserAttributes)
  fun logEvent(event: NativeCustomEvent)
  fun updatePushPermissionStatus()
  fun pauseInAppMessages(isPaused: Boolean)
  fun getInitialNotification(): Map<String, Any>?

  companion object {
    /** The codec used by RetenoHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      RetenoHostApiCodec
    }
    /** Sets up an instance of `RetenoHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: RetenoHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val externalUserIdArg = args[0] as String
            val userArg = args[1] as NativeRetenoUser?
            var wrapped: List<Any?>
            try {
              api.setUserAttributes(externalUserIdArg, userArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val anonymousUserAttributesArg = args[0] as NativeAnonymousUserAttributes
            var wrapped: List<Any?>
            try {
              api.setAnonymousUserAttributes(anonymousUserAttributesArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventArg = args[0] as NativeCustomEvent
            var wrapped: List<Any?>
            try {
              api.logEvent(eventArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.updatePushPermissionStatus()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val isPausedArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.pauseInAppMessages(isPausedArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getInitialNotification())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object RetenoFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAddress.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAnonymousUserAttributes.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEvent.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeCustomEventParameter.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeInAppMessageAction.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeRetenoUser.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserAttributes.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserCustomField.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAddress -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAnonymousUserAttributes -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeCustomEvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeCustomEventParameter -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeInAppMessageAction -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeRetenoUser -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeUserAttributes -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeUserCustomField -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class RetenoFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by RetenoFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      RetenoFlutterApiCodec
    }
  }
  fun onNotificationReceived(payloadArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(payloadArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onNotificationClicked(payloadArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(payloadArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onInAppMessageStatusChanged(statusArg: NativeInAppMessageStatus, actionArg: NativeInAppMessageAction?, errorArg: String?, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(statusArg.raw, actionArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
