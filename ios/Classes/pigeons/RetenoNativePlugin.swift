// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum NativeInAppMessageStatus: Int {
  case inAppShouldBeDisplayed = 0
  case inAppIsDisplayed = 1
  case inAppShouldBeClosed = 2
  case inAppIsClosed = 3
  case inAppReceivedError = 4
}

enum NativeRecomEventType: Int {
  case impression = 0
  case click = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRetenoUser {
  var userAttributes: NativeUserAttributes? = nil
  var subscriptionKeys: [String?]? = nil
  var groupNamesInclude: [String?]? = nil
  var groupNamesExclude: [String?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeRetenoUser? {
    let userAttributes: NativeUserAttributes? = nilOrValue(__pigeon_list[0])
    let subscriptionKeys: [String?]? = nilOrValue(__pigeon_list[1])
    let groupNamesInclude: [String?]? = nilOrValue(__pigeon_list[2])
    let groupNamesExclude: [String?]? = nilOrValue(__pigeon_list[3])

    return NativeRetenoUser(
      userAttributes: userAttributes,
      subscriptionKeys: subscriptionKeys,
      groupNamesInclude: groupNamesInclude,
      groupNamesExclude: groupNamesExclude
    )
  }
  func toList() -> [Any?] {
    return [
      userAttributes,
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserAttributes {
  var phone: String? = nil
  var email: String? = nil
  var firstName: String? = nil
  var lastName: String? = nil
  var languageCode: String? = nil
  var timeZone: String? = nil
  var address: NativeAddress? = nil
  var fields: [NativeUserCustomField?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeUserAttributes? {
    let phone: String? = nilOrValue(__pigeon_list[0])
    let email: String? = nilOrValue(__pigeon_list[1])
    let firstName: String? = nilOrValue(__pigeon_list[2])
    let lastName: String? = nilOrValue(__pigeon_list[3])
    let languageCode: String? = nilOrValue(__pigeon_list[4])
    let timeZone: String? = nilOrValue(__pigeon_list[5])
    let address: NativeAddress? = nilOrValue(__pigeon_list[6])
    let fields: [NativeUserCustomField?]? = nilOrValue(__pigeon_list[7])

    return NativeUserAttributes(
      phone: phone,
      email: email,
      firstName: firstName,
      lastName: lastName,
      languageCode: languageCode,
      timeZone: timeZone,
      address: address,
      fields: fields
    )
  }
  func toList() -> [Any?] {
    return [
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAddress {
  var region: String? = nil
  var town: String? = nil
  var address: String? = nil
  var postcode: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeAddress? {
    let region: String? = nilOrValue(__pigeon_list[0])
    let town: String? = nilOrValue(__pigeon_list[1])
    let address: String? = nilOrValue(__pigeon_list[2])
    let postcode: String? = nilOrValue(__pigeon_list[3])

    return NativeAddress(
      region: region,
      town: town,
      address: address,
      postcode: postcode
    )
  }
  func toList() -> [Any?] {
    return [
      region,
      town,
      address,
      postcode,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserCustomField {
  var key: String
  var value: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeUserCustomField? {
    let key = __pigeon_list[0] as! String
    let value: String? = nilOrValue(__pigeon_list[1])

    return NativeUserCustomField(
      key: key,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAnonymousUserAttributes {
  var firstName: String? = nil
  var lastName: String? = nil
  var languageCode: String? = nil
  var timeZone: String? = nil
  var address: NativeAddress? = nil
  var fields: [NativeUserCustomField?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeAnonymousUserAttributes? {
    let firstName: String? = nilOrValue(__pigeon_list[0])
    let lastName: String? = nilOrValue(__pigeon_list[1])
    let languageCode: String? = nilOrValue(__pigeon_list[2])
    let timeZone: String? = nilOrValue(__pigeon_list[3])
    let address: NativeAddress? = nilOrValue(__pigeon_list[4])
    let fields: [NativeUserCustomField?]? = nilOrValue(__pigeon_list[5])

    return NativeAnonymousUserAttributes(
      firstName: firstName,
      lastName: lastName,
      languageCode: languageCode,
      timeZone: timeZone,
      address: address,
      fields: fields
    )
  }
  func toList() -> [Any?] {
    return [
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeCustomEvent {
  var eventTypeKey: String
  var dateOccurred: String
  var parameters: [NativeCustomEventParameter?]
  var forcePush: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeCustomEvent? {
    let eventTypeKey = __pigeon_list[0] as! String
    let dateOccurred = __pigeon_list[1] as! String
    let parameters = __pigeon_list[2] as! [NativeCustomEventParameter?]
    let forcePush = __pigeon_list[3] as! Bool

    return NativeCustomEvent(
      eventTypeKey: eventTypeKey,
      dateOccurred: dateOccurred,
      parameters: parameters,
      forcePush: forcePush
    )
  }
  func toList() -> [Any?] {
    return [
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeCustomEventParameter {
  var name: String
  var value: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeCustomEventParameter? {
    let name = __pigeon_list[0] as! String
    let value: String? = nilOrValue(__pigeon_list[1])

    return NativeCustomEventParameter(
      name: name,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeInAppMessageAction {
  var isCloseButtonClicked: Bool
  var isButtonClicked: Bool
  var isOpenUrlClicked: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeInAppMessageAction? {
    let isCloseButtonClicked = __pigeon_list[0] as! Bool
    let isButtonClicked = __pigeon_list[1] as! Bool
    let isOpenUrlClicked = __pigeon_list[2] as! Bool

    return NativeInAppMessageAction(
      isCloseButtonClicked: isCloseButtonClicked,
      isButtonClicked: isButtonClicked,
      isOpenUrlClicked: isOpenUrlClicked
    )
  }
  func toList() -> [Any?] {
    return [
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRecomFilter {
  var name: String
  var values: [String?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeRecomFilter? {
    let name = __pigeon_list[0] as! String
    let values = __pigeon_list[1] as! [String?]

    return NativeRecomFilter(
      name: name,
      values: values
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      values,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRecommendation {
  var productId: String
  var name: String? = nil
  var description: String? = nil
  var imageUrl: String? = nil
  var price: Double? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeRecommendation? {
    let productId = __pigeon_list[0] as! String
    let name: String? = nilOrValue(__pigeon_list[1])
    let description: String? = nilOrValue(__pigeon_list[2])
    let imageUrl: String? = nilOrValue(__pigeon_list[3])
    let price: Double? = nilOrValue(__pigeon_list[4])

    return NativeRecommendation(
      productId: productId,
      name: name,
      description: description,
      imageUrl: imageUrl,
      price: price
    )
  }
  func toList() -> [Any?] {
    return [
      productId,
      name,
      description,
      imageUrl,
      price,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRecomEvent {
  var eventType: NativeRecomEventType
  var dateOccurred: String
  var productId: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeRecomEvent? {
    let eventType = NativeRecomEventType(rawValue: __pigeon_list[0] as! Int)!
    let dateOccurred = __pigeon_list[1] as! String
    let productId = __pigeon_list[2] as! String

    return NativeRecomEvent(
      eventType: eventType,
      dateOccurred: dateOccurred,
      productId: productId
    )
  }
  func toList() -> [Any?] {
    return [
      eventType.rawValue,
      dateOccurred,
      productId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRecomEvents {
  var recomVariantId: String
  var events: [NativeRecomEvent?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeRecomEvents? {
    let recomVariantId = __pigeon_list[0] as! String
    let events = __pigeon_list[1] as! [NativeRecomEvent?]

    return NativeRecomEvents(
      recomVariantId: recomVariantId,
      events: events
    )
  }
  func toList() -> [Any?] {
    return [
      recomVariantId,
      events,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeLifecycleTrackingOptions {
  var appLifecycleEnabled: Bool
  var pushSubscriptionEnabled: Bool
  var sessionEventsEnabled: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeLifecycleTrackingOptions? {
    let appLifecycleEnabled = __pigeon_list[0] as! Bool
    let pushSubscriptionEnabled = __pigeon_list[1] as! Bool
    let sessionEventsEnabled = __pigeon_list[2] as! Bool

    return NativeLifecycleTrackingOptions(
      appLifecycleEnabled: appLifecycleEnabled,
      pushSubscriptionEnabled: pushSubscriptionEnabled,
      sessionEventsEnabled: sessionEventsEnabled
    )
  }
  func toList() -> [Any?] {
    return [
      appLifecycleEnabled,
      pushSubscriptionEnabled,
      sessionEventsEnabled,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAppInboxMessages {
  var messages: [NativeAppInboxMessage?]
  var totalPages: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeAppInboxMessages? {
    let messages = __pigeon_list[0] as! [NativeAppInboxMessage?]
    let totalPages = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)

    return NativeAppInboxMessages(
      messages: messages,
      totalPages: totalPages
    )
  }
  func toList() -> [Any?] {
    return [
      messages,
      totalPages,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAppInboxMessage {
  var id: String
  var title: String
  var createdDate: String
  var isNewMessage: Bool
  var content: String? = nil
  var imageUrl: String? = nil
  var linkUrl: String? = nil
  var category: String? = nil
  var customData: [String?: Any?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeAppInboxMessage? {
    let id = __pigeon_list[0] as! String
    let title = __pigeon_list[1] as! String
    let createdDate = __pigeon_list[2] as! String
    let isNewMessage = __pigeon_list[3] as! Bool
    let content: String? = nilOrValue(__pigeon_list[4])
    let imageUrl: String? = nilOrValue(__pigeon_list[5])
    let linkUrl: String? = nilOrValue(__pigeon_list[6])
    let category: String? = nilOrValue(__pigeon_list[7])
    let customData: [String?: Any?]? = nilOrValue(__pigeon_list[8])

    return NativeAppInboxMessage(
      id: id,
      title: title,
      createdDate: createdDate,
      isNewMessage: isNewMessage,
      content: content,
      imageUrl: imageUrl,
      linkUrl: linkUrl,
      category: category,
      customData: customData
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      createdDate,
      isNewMessage,
      content,
      imageUrl,
      linkUrl,
      category,
      customData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserNotificationAction {
  var actionId: String? = nil
  var customData: [String?: Any?]? = nil
  var link: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeUserNotificationAction? {
    let actionId: String? = nilOrValue(__pigeon_list[0])
    let customData: [String?: Any?]? = nilOrValue(__pigeon_list[1])
    let link: String? = nilOrValue(__pigeon_list[2])

    return NativeUserNotificationAction(
      actionId: actionId,
      customData: customData,
      link: link
    )
  }
  func toList() -> [Any?] {
    return [
      actionId,
      customData,
      link,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeEcommerceProduct {
  var productId: String
  var price: Double
  var inStock: Bool
  var attributes: [String?: [String]?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeEcommerceProduct? {
    let productId = __pigeon_list[0] as! String
    let price = __pigeon_list[1] as! Double
    let inStock = __pigeon_list[2] as! Bool
    let attributes: [String?: [String]?]? = nilOrValue(__pigeon_list[3])

    return NativeEcommerceProduct(
      productId: productId,
      price: price,
      inStock: inStock,
      attributes: attributes
    )
  }
  func toList() -> [Any?] {
    return [
      productId,
      price,
      inStock,
      attributes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeEcommerceCategory {
  var productCategoryId: String
  var attributes: [String?: [String]?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeEcommerceCategory? {
    let productCategoryId = __pigeon_list[0] as! String
    let attributes: [String?: [String]?]? = nilOrValue(__pigeon_list[1])

    return NativeEcommerceCategory(
      productCategoryId: productCategoryId,
      attributes: attributes
    )
  }
  func toList() -> [Any?] {
    return [
      productCategoryId,
      attributes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeEcommerceProductInCart {
  var productId: String
  var price: Double
  var quantity: Int64
  var discount: Double? = nil
  var name: String? = nil
  var category: String? = nil
  var attributes: [String?: [String]?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeEcommerceProductInCart? {
    let productId = __pigeon_list[0] as! String
    let price = __pigeon_list[1] as! Double
    let quantity = __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)
    let discount: Double? = nilOrValue(__pigeon_list[3])
    let name: String? = nilOrValue(__pigeon_list[4])
    let category: String? = nilOrValue(__pigeon_list[5])
    let attributes: [String?: [String]?]? = nilOrValue(__pigeon_list[6])

    return NativeEcommerceProductInCart(
      productId: productId,
      price: price,
      quantity: quantity,
      discount: discount,
      name: name,
      category: category,
      attributes: attributes
    )
  }
  func toList() -> [Any?] {
    return [
      productId,
      price,
      quantity,
      discount,
      name,
      category,
      attributes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeEcommerceItem {
  var externalItemId: String
  var name: String
  var category: String
  var quantity: Double
  var cost: Double
  var url: String
  var imageUrl: String? = nil
  var description: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeEcommerceItem? {
    let externalItemId = __pigeon_list[0] as! String
    let name = __pigeon_list[1] as! String
    let category = __pigeon_list[2] as! String
    let quantity = __pigeon_list[3] as! Double
    let cost = __pigeon_list[4] as! Double
    let url = __pigeon_list[5] as! String
    let imageUrl: String? = nilOrValue(__pigeon_list[6])
    let description: String? = nilOrValue(__pigeon_list[7])

    return NativeEcommerceItem(
      externalItemId: externalItemId,
      name: name,
      category: category,
      quantity: quantity,
      cost: cost,
      url: url,
      imageUrl: imageUrl,
      description: description
    )
  }
  func toList() -> [Any?] {
    return [
      externalItemId,
      name,
      category,
      quantity,
      cost,
      url,
      imageUrl,
      description,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeEcommerceOrder {
  var externalOrderId: String
  var totalCost: Double
  var status: String
  var date: String
  var cartId: String? = nil
  var email: String? = nil
  var phone: String? = nil
  var firstName: String? = nil
  var lastName: String? = nil
  var shipping: Double? = nil
  var discount: Double? = nil
  var taxes: Double? = nil
  var restoreUrl: String? = nil
  var statusDescription: String? = nil
  var storeId: String? = nil
  var source: String? = nil
  var deliveryMethod: String? = nil
  var paymentMethod: String? = nil
  var deliveryAddress: String? = nil
  var items: [NativeEcommerceItem?]? = nil
  var attributes: [String?: [String]?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> NativeEcommerceOrder? {
    let externalOrderId = __pigeon_list[0] as! String
    let totalCost = __pigeon_list[1] as! Double
    let status = __pigeon_list[2] as! String
    let date = __pigeon_list[3] as! String
    let cartId: String? = nilOrValue(__pigeon_list[4])
    let email: String? = nilOrValue(__pigeon_list[5])
    let phone: String? = nilOrValue(__pigeon_list[6])
    let firstName: String? = nilOrValue(__pigeon_list[7])
    let lastName: String? = nilOrValue(__pigeon_list[8])
    let shipping: Double? = nilOrValue(__pigeon_list[9])
    let discount: Double? = nilOrValue(__pigeon_list[10])
    let taxes: Double? = nilOrValue(__pigeon_list[11])
    let restoreUrl: String? = nilOrValue(__pigeon_list[12])
    let statusDescription: String? = nilOrValue(__pigeon_list[13])
    let storeId: String? = nilOrValue(__pigeon_list[14])
    let source: String? = nilOrValue(__pigeon_list[15])
    let deliveryMethod: String? = nilOrValue(__pigeon_list[16])
    let paymentMethod: String? = nilOrValue(__pigeon_list[17])
    let deliveryAddress: String? = nilOrValue(__pigeon_list[18])
    let items: [NativeEcommerceItem?]? = nilOrValue(__pigeon_list[19])
    let attributes: [String?: [String]?]? = nilOrValue(__pigeon_list[20])

    return NativeEcommerceOrder(
      externalOrderId: externalOrderId,
      totalCost: totalCost,
      status: status,
      date: date,
      cartId: cartId,
      email: email,
      phone: phone,
      firstName: firstName,
      lastName: lastName,
      shipping: shipping,
      discount: discount,
      taxes: taxes,
      restoreUrl: restoreUrl,
      statusDescription: statusDescription,
      storeId: storeId,
      source: source,
      deliveryMethod: deliveryMethod,
      paymentMethod: paymentMethod,
      deliveryAddress: deliveryAddress,
      items: items,
      attributes: attributes
    )
  }
  func toList() -> [Any?] {
    return [
      externalOrderId,
      totalCost,
      status,
      date,
      cartId,
      email,
      phone,
      firstName,
      lastName,
      shipping,
      discount,
      taxes,
      restoreUrl,
      statusDescription,
      storeId,
      source,
      deliveryMethod,
      paymentMethod,
      deliveryAddress,
      items,
      attributes,
    ]
  }
}

private class RetenoHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return NativeAddress.fromList(self.readValue() as! [Any?])
    case 129:
      return NativeAnonymousUserAttributes.fromList(self.readValue() as! [Any?])
    case 130:
      return NativeAppInboxMessage.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeAppInboxMessages.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeCustomEvent.fromList(self.readValue() as! [Any?])
    case 133:
      return NativeCustomEventParameter.fromList(self.readValue() as! [Any?])
    case 134:
      return NativeEcommerceCategory.fromList(self.readValue() as! [Any?])
    case 135:
      return NativeEcommerceItem.fromList(self.readValue() as! [Any?])
    case 136:
      return NativeEcommerceOrder.fromList(self.readValue() as! [Any?])
    case 137:
      return NativeEcommerceProduct.fromList(self.readValue() as! [Any?])
    case 138:
      return NativeEcommerceProductInCart.fromList(self.readValue() as! [Any?])
    case 139:
      return NativeInAppMessageAction.fromList(self.readValue() as! [Any?])
    case 140:
      return NativeLifecycleTrackingOptions.fromList(self.readValue() as! [Any?])
    case 141:
      return NativeRecomEvent.fromList(self.readValue() as! [Any?])
    case 142:
      return NativeRecomEvents.fromList(self.readValue() as! [Any?])
    case 143:
      return NativeRecomFilter.fromList(self.readValue() as! [Any?])
    case 144:
      return NativeRecommendation.fromList(self.readValue() as! [Any?])
    case 145:
      return NativeRetenoUser.fromList(self.readValue() as! [Any?])
    case 146:
      return NativeUserAttributes.fromList(self.readValue() as! [Any?])
    case 147:
      return NativeUserCustomField.fromList(self.readValue() as! [Any?])
    case 148:
      return NativeUserNotificationAction.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class RetenoHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAddress {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAnonymousUserAttributes {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAppInboxMessage {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAppInboxMessages {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEventParameter {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceCategory {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceItem {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceOrder {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceProduct {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceProductInCart {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? NativeInAppMessageAction {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? NativeLifecycleTrackingOptions {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomEvent {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomEvents {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomFilter {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecommendation {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRetenoUser {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserAttributes {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserCustomField {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserNotificationAction {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class RetenoHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return RetenoHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return RetenoHostApiCodecWriter(data: data)
  }
}

class RetenoHostApiCodec: FlutterStandardMessageCodec {
  static let shared = RetenoHostApiCodec(readerWriter: RetenoHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol RetenoHostApi {
  func initWith(accessKey: String, lifecycleTrackingOptions: NativeLifecycleTrackingOptions?, isPausedInAppMessages: Bool, useCustomDeviceIdProvider: Bool) throws
  func setUserAttributes(externalUserId: String, user: NativeRetenoUser?) throws
  func setAnonymousUserAttributes(anonymousUserAttributes: NativeAnonymousUserAttributes) throws
  func logEvent(event: NativeCustomEvent) throws
  func updatePushPermissionStatus() throws
  func pauseInAppMessages(isPaused: Bool) throws
  func getInitialNotification() throws -> [String: Any]?
  func getRecommendations(recomVariantId: String, productIds: [String], categoryId: String, filters: [NativeRecomFilter]?, fields: [String]?, completion: @escaping (Result<[NativeRecommendation], Error>) -> Void)
  func logRecommendationsEvent(events: NativeRecomEvents) throws
  func getAppInboxMessages(page: Int64?, pageSize: Int64?, completion: @escaping (Result<NativeAppInboxMessages, Error>) -> Void)
  func getAppInboxMessagesCount(completion: @escaping (Result<Int64, Error>) -> Void)
  func markAsOpened(messageId: String) throws
  func markAllMessagesAsOpened(completion: @escaping (Result<Void, Error>) -> Void)
  func subscribeOnMessagesCountChanged() throws
  func unsubscribeAllMessagesCountChanged() throws
  func logEcommerceProductViewed(product: NativeEcommerceProduct, currency: String?) throws
  func logEcommerceProductCategoryViewed(category: NativeEcommerceCategory) throws
  func logEcommerceProductAddedToWishlist(product: NativeEcommerceProduct, currency: String?) throws
  func logEcommerceCartUpdated(cartId: String, products: [NativeEcommerceProductInCart], currency: String?) throws
  func logEcommerceOrderCreated(order: NativeEcommerceOrder, currency: String?) throws
  func logEcommerceOrderUpdated(order: NativeEcommerceOrder, currency: String?) throws
  func logEcommerceOrderDelivered(externalOrderId: String) throws
  func logEcommerceOrderCancelled(externalOrderId: String) throws
  func logEcommerceSearchRequest(query: String, isFound: Bool?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class RetenoHostApiSetup {
  /// The codec used by RetenoHostApi.
  static var codec: FlutterStandardMessageCodec { RetenoHostApiCodec.shared }
  /// Sets up an instance of `RetenoHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: RetenoHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initWithChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.initWith\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initWithChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accessKeyArg = args[0] as! String
        let lifecycleTrackingOptionsArg: NativeLifecycleTrackingOptions? = nilOrValue(args[1])
        let isPausedInAppMessagesArg = args[2] as! Bool
        let useCustomDeviceIdProviderArg = args[3] as! Bool
        do {
          try api.initWith(accessKey: accessKeyArg, lifecycleTrackingOptions: lifecycleTrackingOptionsArg, isPausedInAppMessages: isPausedInAppMessagesArg, useCustomDeviceIdProvider: useCustomDeviceIdProviderArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initWithChannel.setMessageHandler(nil)
    }
    let setUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let externalUserIdArg = args[0] as! String
        let userArg: NativeRetenoUser? = nilOrValue(args[1])
        do {
          try api.setUserAttributes(externalUserId: externalUserIdArg, user: userArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUserAttributesChannel.setMessageHandler(nil)
    }
    let setAnonymousUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAnonymousUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anonymousUserAttributesArg = args[0] as! NativeAnonymousUserAttributes
        do {
          try api.setAnonymousUserAttributes(anonymousUserAttributes: anonymousUserAttributesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAnonymousUserAttributesChannel.setMessageHandler(nil)
    }
    let logEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventArg = args[0] as! NativeCustomEvent
        do {
          try api.logEvent(event: eventArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEventChannel.setMessageHandler(nil)
    }
    let updatePushPermissionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePushPermissionStatusChannel.setMessageHandler { _, reply in
        do {
          try api.updatePushPermissionStatus()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updatePushPermissionStatusChannel.setMessageHandler(nil)
    }
    let pauseInAppMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseInAppMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isPausedArg = args[0] as! Bool
        do {
          try api.pauseInAppMessages(isPaused: isPausedArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseInAppMessagesChannel.setMessageHandler(nil)
    }
    let getInitialNotificationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getInitialNotificationChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getInitialNotification()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getInitialNotificationChannel.setMessageHandler(nil)
    }
    let getRecommendationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getRecommendations\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRecommendationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let recomVariantIdArg = args[0] as! String
        let productIdsArg = args[1] as! [String]
        let categoryIdArg = args[2] as! String
        let filtersArg: [NativeRecomFilter]? = nilOrValue(args[3])
        let fieldsArg: [String]? = nilOrValue(args[4])
        api.getRecommendations(recomVariantId: recomVariantIdArg, productIds: productIdsArg, categoryId: categoryIdArg, filters: filtersArg, fields: fieldsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getRecommendationsChannel.setMessageHandler(nil)
    }
    let logRecommendationsEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logRecommendationsEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logRecommendationsEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventsArg = args[0] as! NativeRecomEvents
        do {
          try api.logRecommendationsEvent(events: eventsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logRecommendationsEventChannel.setMessageHandler(nil)
    }
    let getAppInboxMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppInboxMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pageArg: Int64? = isNullish(args[0]) ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        let pageSizeArg: Int64? = isNullish(args[1]) ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        api.getAppInboxMessages(page: pageArg, pageSize: pageSizeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAppInboxMessagesChannel.setMessageHandler(nil)
    }
    let getAppInboxMessagesCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessagesCount\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppInboxMessagesCountChannel.setMessageHandler { _, reply in
        api.getAppInboxMessagesCount { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAppInboxMessagesCountChannel.setMessageHandler(nil)
    }
    let markAsOpenedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAsOpened\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      markAsOpenedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageIdArg = args[0] as! String
        do {
          try api.markAsOpened(messageId: messageIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      markAsOpenedChannel.setMessageHandler(nil)
    }
    let markAllMessagesAsOpenedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAllMessagesAsOpened\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      markAllMessagesAsOpenedChannel.setMessageHandler { _, reply in
        api.markAllMessagesAsOpened { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      markAllMessagesAsOpenedChannel.setMessageHandler(nil)
    }
    let subscribeOnMessagesCountChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.subscribeOnMessagesCountChanged\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeOnMessagesCountChangedChannel.setMessageHandler { _, reply in
        do {
          try api.subscribeOnMessagesCountChanged()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeOnMessagesCountChangedChannel.setMessageHandler(nil)
    }
    let unsubscribeAllMessagesCountChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.unsubscribeAllMessagesCountChanged\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeAllMessagesCountChangedChannel.setMessageHandler { _, reply in
        do {
          try api.unsubscribeAllMessagesCountChanged()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeAllMessagesCountChangedChannel.setMessageHandler(nil)
    }
    let logEcommerceProductViewedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductViewed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceProductViewedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let productArg = args[0] as! NativeEcommerceProduct
        let currencyArg: String? = nilOrValue(args[1])
        do {
          try api.logEcommerceProductViewed(product: productArg, currency: currencyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceProductViewedChannel.setMessageHandler(nil)
    }
    let logEcommerceProductCategoryViewedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductCategoryViewed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceProductCategoryViewedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let categoryArg = args[0] as! NativeEcommerceCategory
        do {
          try api.logEcommerceProductCategoryViewed(category: categoryArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceProductCategoryViewedChannel.setMessageHandler(nil)
    }
    let logEcommerceProductAddedToWishlistChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductAddedToWishlist\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceProductAddedToWishlistChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let productArg = args[0] as! NativeEcommerceProduct
        let currencyArg: String? = nilOrValue(args[1])
        do {
          try api.logEcommerceProductAddedToWishlist(product: productArg, currency: currencyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceProductAddedToWishlistChannel.setMessageHandler(nil)
    }
    let logEcommerceCartUpdatedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceCartUpdated\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceCartUpdatedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let cartIdArg = args[0] as! String
        let productsArg = args[1] as! [NativeEcommerceProductInCart]
        let currencyArg: String? = nilOrValue(args[2])
        do {
          try api.logEcommerceCartUpdated(cartId: cartIdArg, products: productsArg, currency: currencyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceCartUpdatedChannel.setMessageHandler(nil)
    }
    let logEcommerceOrderCreatedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCreated\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceOrderCreatedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let orderArg = args[0] as! NativeEcommerceOrder
        let currencyArg: String? = nilOrValue(args[1])
        do {
          try api.logEcommerceOrderCreated(order: orderArg, currency: currencyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceOrderCreatedChannel.setMessageHandler(nil)
    }
    let logEcommerceOrderUpdatedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderUpdated\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceOrderUpdatedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let orderArg = args[0] as! NativeEcommerceOrder
        let currencyArg: String? = nilOrValue(args[1])
        do {
          try api.logEcommerceOrderUpdated(order: orderArg, currency: currencyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceOrderUpdatedChannel.setMessageHandler(nil)
    }
    let logEcommerceOrderDeliveredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderDelivered\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceOrderDeliveredChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let externalOrderIdArg = args[0] as! String
        do {
          try api.logEcommerceOrderDelivered(externalOrderId: externalOrderIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceOrderDeliveredChannel.setMessageHandler(nil)
    }
    let logEcommerceOrderCancelledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCancelled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceOrderCancelledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let externalOrderIdArg = args[0] as! String
        do {
          try api.logEcommerceOrderCancelled(externalOrderId: externalOrderIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceOrderCancelledChannel.setMessageHandler(nil)
    }
    let logEcommerceSearchRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceSearchRequest\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEcommerceSearchRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let queryArg = args[0] as! String
        let isFoundArg: Bool? = nilOrValue(args[1])
        do {
          try api.logEcommerceSearchRequest(query: queryArg, isFound: isFoundArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEcommerceSearchRequestChannel.setMessageHandler(nil)
    }
  }
}
private class RetenoFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return NativeAddress.fromList(self.readValue() as! [Any?])
    case 129:
      return NativeAnonymousUserAttributes.fromList(self.readValue() as! [Any?])
    case 130:
      return NativeAppInboxMessage.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeAppInboxMessages.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeCustomEvent.fromList(self.readValue() as! [Any?])
    case 133:
      return NativeCustomEventParameter.fromList(self.readValue() as! [Any?])
    case 134:
      return NativeEcommerceCategory.fromList(self.readValue() as! [Any?])
    case 135:
      return NativeEcommerceItem.fromList(self.readValue() as! [Any?])
    case 136:
      return NativeEcommerceOrder.fromList(self.readValue() as! [Any?])
    case 137:
      return NativeEcommerceProduct.fromList(self.readValue() as! [Any?])
    case 138:
      return NativeEcommerceProductInCart.fromList(self.readValue() as! [Any?])
    case 139:
      return NativeInAppMessageAction.fromList(self.readValue() as! [Any?])
    case 140:
      return NativeLifecycleTrackingOptions.fromList(self.readValue() as! [Any?])
    case 141:
      return NativeRecomEvent.fromList(self.readValue() as! [Any?])
    case 142:
      return NativeRecomEvents.fromList(self.readValue() as! [Any?])
    case 143:
      return NativeRecomFilter.fromList(self.readValue() as! [Any?])
    case 144:
      return NativeRecommendation.fromList(self.readValue() as! [Any?])
    case 145:
      return NativeRetenoUser.fromList(self.readValue() as! [Any?])
    case 146:
      return NativeUserAttributes.fromList(self.readValue() as! [Any?])
    case 147:
      return NativeUserCustomField.fromList(self.readValue() as! [Any?])
    case 148:
      return NativeUserNotificationAction.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class RetenoFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAddress {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAnonymousUserAttributes {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAppInboxMessage {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAppInboxMessages {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEventParameter {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceCategory {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceItem {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceOrder {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceProduct {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? NativeEcommerceProductInCart {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? NativeInAppMessageAction {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? NativeLifecycleTrackingOptions {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomEvent {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomEvents {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecomFilter {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRecommendation {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRetenoUser {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserAttributes {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserCustomField {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserNotificationAction {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class RetenoFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return RetenoFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return RetenoFlutterApiCodecWriter(data: data)
  }
}

class RetenoFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = RetenoFlutterApiCodec(readerWriter: RetenoFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol RetenoFlutterApiProtocol {
  func onNotificationReceived(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onNotificationClicked(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onNotificationActionHandler(action actionArg: NativeUserNotificationAction, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onInAppMessageStatusChanged(status statusArg: NativeInAppMessageStatus, action actionArg: NativeInAppMessageAction?, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onMessagesCountChanged(count countArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func getDeviceId(completion: @escaping (Result<String?, FlutterError>) -> Void)
}
class RetenoFlutterApi: RetenoFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterStandardMessageCodec {
    return RetenoFlutterApiCodec.shared
  }
  func onNotificationReceived(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([payloadArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNotificationClicked(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([payloadArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNotificationActionHandler(action actionArg: NativeUserNotificationAction, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([actionArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onInAppMessageStatusChanged(status statusArg: NativeInAppMessageStatus, action actionArg: NativeInAppMessageAction?, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg.rawValue, actionArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMessagesCountChanged(count countArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([countArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func getDeviceId(completion: @escaping (Result<String?, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.getDeviceId\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
}
