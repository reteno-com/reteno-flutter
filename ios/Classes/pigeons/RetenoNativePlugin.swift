// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum NativeInAppMessageStatus: Int {
  case inAppShouldBeDisplayed = 0
  case inAppIsDisplayed = 1
  case inAppShouldBeClosed = 2
  case inAppIsClosed = 3
  case inAppReceivedError = 4
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeRetenoUser {
  var userAttributes: NativeUserAttributes? = nil
  var subscriptionKeys: [String?]? = nil
  var groupNamesInclude: [String?]? = nil
  var groupNamesExclude: [String?]? = nil

  static func fromList(_ list: [Any?]) -> NativeRetenoUser? {
    var userAttributes: NativeUserAttributes? = nil
    if let userAttributesList: [Any?] = nilOrValue(list[0]) {
      userAttributes = NativeUserAttributes.fromList(userAttributesList)
    }
    let subscriptionKeys: [String?]? = nilOrValue(list[1])
    let groupNamesInclude: [String?]? = nilOrValue(list[2])
    let groupNamesExclude: [String?]? = nilOrValue(list[3])

    return NativeRetenoUser(
      userAttributes: userAttributes,
      subscriptionKeys: subscriptionKeys,
      groupNamesInclude: groupNamesInclude,
      groupNamesExclude: groupNamesExclude
    )
  }
  func toList() -> [Any?] {
    return [
      userAttributes?.toList(),
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserAttributes {
  var phone: String? = nil
  var email: String? = nil
  var firstName: String? = nil
  var lastName: String? = nil
  var languageCode: String? = nil
  var timeZone: String? = nil
  var address: NativeAddress? = nil
  var fields: [NativeUserCustomField?]? = nil

  static func fromList(_ list: [Any?]) -> NativeUserAttributes? {
    let phone: String? = nilOrValue(list[0])
    let email: String? = nilOrValue(list[1])
    let firstName: String? = nilOrValue(list[2])
    let lastName: String? = nilOrValue(list[3])
    let languageCode: String? = nilOrValue(list[4])
    let timeZone: String? = nilOrValue(list[5])
    var address: NativeAddress? = nil
    if let addressList: [Any?] = nilOrValue(list[6]) {
      address = NativeAddress.fromList(addressList)
    }
    let fields: [NativeUserCustomField?]? = nilOrValue(list[7])

    return NativeUserAttributes(
      phone: phone,
      email: email,
      firstName: firstName,
      lastName: lastName,
      languageCode: languageCode,
      timeZone: timeZone,
      address: address,
      fields: fields
    )
  }
  func toList() -> [Any?] {
    return [
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.toList(),
      fields,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAddress {
  var region: String? = nil
  var town: String? = nil
  var address: String? = nil
  var postcode: String? = nil

  static func fromList(_ list: [Any?]) -> NativeAddress? {
    let region: String? = nilOrValue(list[0])
    let town: String? = nilOrValue(list[1])
    let address: String? = nilOrValue(list[2])
    let postcode: String? = nilOrValue(list[3])

    return NativeAddress(
      region: region,
      town: town,
      address: address,
      postcode: postcode
    )
  }
  func toList() -> [Any?] {
    return [
      region,
      town,
      address,
      postcode,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserCustomField {
  var key: String
  var value: String? = nil

  static func fromList(_ list: [Any?]) -> NativeUserCustomField? {
    let key = list[0] as! String
    let value: String? = nilOrValue(list[1])

    return NativeUserCustomField(
      key: key,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAnonymousUserAttributes {
  var firstName: String? = nil
  var lastName: String? = nil
  var languageCode: String? = nil
  var timeZone: String? = nil
  var address: NativeAddress? = nil
  var fields: [NativeUserCustomField?]? = nil

  static func fromList(_ list: [Any?]) -> NativeAnonymousUserAttributes? {
    let firstName: String? = nilOrValue(list[0])
    let lastName: String? = nilOrValue(list[1])
    let languageCode: String? = nilOrValue(list[2])
    let timeZone: String? = nilOrValue(list[3])
    var address: NativeAddress? = nil
    if let addressList: [Any?] = nilOrValue(list[4]) {
      address = NativeAddress.fromList(addressList)
    }
    let fields: [NativeUserCustomField?]? = nilOrValue(list[5])

    return NativeAnonymousUserAttributes(
      firstName: firstName,
      lastName: lastName,
      languageCode: languageCode,
      timeZone: timeZone,
      address: address,
      fields: fields
    )
  }
  func toList() -> [Any?] {
    return [
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.toList(),
      fields,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeCustomEvent {
  var eventTypeKey: String
  var dateOccurred: String
  var parameters: [NativeCustomEventParameter?]
  var forcePush: Bool

  static func fromList(_ list: [Any?]) -> NativeCustomEvent? {
    let eventTypeKey = list[0] as! String
    let dateOccurred = list[1] as! String
    let parameters = list[2] as! [NativeCustomEventParameter?]
    let forcePush = list[3] as! Bool

    return NativeCustomEvent(
      eventTypeKey: eventTypeKey,
      dateOccurred: dateOccurred,
      parameters: parameters,
      forcePush: forcePush
    )
  }
  func toList() -> [Any?] {
    return [
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeCustomEventParameter {
  var name: String
  var value: String? = nil

  static func fromList(_ list: [Any?]) -> NativeCustomEventParameter? {
    let name = list[0] as! String
    let value: String? = nilOrValue(list[1])

    return NativeCustomEventParameter(
      name: name,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeInAppMessageAction {
  var isCloseButtonClicked: Bool
  var isButtonClicked: Bool
  var isOpenUrlClicked: Bool

  static func fromList(_ list: [Any?]) -> NativeInAppMessageAction? {
    let isCloseButtonClicked = list[0] as! Bool
    let isButtonClicked = list[1] as! Bool
    let isOpenUrlClicked = list[2] as! Bool

    return NativeInAppMessageAction(
      isCloseButtonClicked: isCloseButtonClicked,
      isButtonClicked: isButtonClicked,
      isOpenUrlClicked: isOpenUrlClicked
    )
  }
  func toList() -> [Any?] {
    return [
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    ]
  }
}
private class RetenoHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return NativeAddress.fromList(self.readValue() as! [Any?])
    case 129:
      return NativeAnonymousUserAttributes.fromList(self.readValue() as! [Any?])
    case 130:
      return NativeCustomEvent.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeCustomEventParameter.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeInAppMessageAction.fromList(self.readValue() as! [Any?])
    case 133:
      return NativeRetenoUser.fromList(self.readValue() as! [Any?])
    case 134:
      return NativeUserAttributes.fromList(self.readValue() as! [Any?])
    case 135:
      return NativeUserCustomField.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class RetenoHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAddress {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAnonymousUserAttributes {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEvent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEventParameter {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeInAppMessageAction {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRetenoUser {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserAttributes {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserCustomField {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class RetenoHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return RetenoHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return RetenoHostApiCodecWriter(data: data)
  }
}

class RetenoHostApiCodec: FlutterStandardMessageCodec {
  static let shared = RetenoHostApiCodec(readerWriter: RetenoHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol RetenoHostApi {
  func setUserAttributes(externalUserId: String, user: NativeRetenoUser?) throws
  func setAnonymousUserAttributes(anonymousUserAttributes: NativeAnonymousUserAttributes) throws
  func logEvent(event: NativeCustomEvent) throws
  func updatePushPermissionStatus() throws
  func pauseInAppMessages(isPaused: Bool) throws
  func getInitialNotification() throws -> [String: Any]?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class RetenoHostApiSetup {
  /// The codec used by RetenoHostApi.
  static var codec: FlutterStandardMessageCodec { RetenoHostApiCodec.shared }
  /// Sets up an instance of `RetenoHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: RetenoHostApi?) {
    let setUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let externalUserIdArg = args[0] as! String
        let userArg: NativeRetenoUser? = nilOrValue(args[1])
        do {
          try api.setUserAttributes(externalUserId: externalUserIdArg, user: userArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUserAttributesChannel.setMessageHandler(nil)
    }
    let setAnonymousUserAttributesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAnonymousUserAttributesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let anonymousUserAttributesArg = args[0] as! NativeAnonymousUserAttributes
        do {
          try api.setAnonymousUserAttributes(anonymousUserAttributes: anonymousUserAttributesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAnonymousUserAttributesChannel.setMessageHandler(nil)
    }
    let logEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventArg = args[0] as! NativeCustomEvent
        do {
          try api.logEvent(event: eventArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEventChannel.setMessageHandler(nil)
    }
    let updatePushPermissionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePushPermissionStatusChannel.setMessageHandler { _, reply in
        do {
          try api.updatePushPermissionStatus()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updatePushPermissionStatusChannel.setMessageHandler(nil)
    }
    let pauseInAppMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseInAppMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isPausedArg = args[0] as! Bool
        do {
          try api.pauseInAppMessages(isPaused: isPausedArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseInAppMessagesChannel.setMessageHandler(nil)
    }
    let getInitialNotificationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getInitialNotificationChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getInitialNotification()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getInitialNotificationChannel.setMessageHandler(nil)
    }
  }
}
private class RetenoFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return NativeAddress.fromList(self.readValue() as! [Any?])
    case 129:
      return NativeAnonymousUserAttributes.fromList(self.readValue() as! [Any?])
    case 130:
      return NativeCustomEvent.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeCustomEventParameter.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeInAppMessageAction.fromList(self.readValue() as! [Any?])
    case 133:
      return NativeRetenoUser.fromList(self.readValue() as! [Any?])
    case 134:
      return NativeUserAttributes.fromList(self.readValue() as! [Any?])
    case 135:
      return NativeUserCustomField.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class RetenoFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAddress {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAnonymousUserAttributes {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEvent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeCustomEventParameter {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeInAppMessageAction {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? NativeRetenoUser {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserAttributes {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserCustomField {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class RetenoFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return RetenoFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return RetenoFlutterApiCodecWriter(data: data)
  }
}

class RetenoFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = RetenoFlutterApiCodec(readerWriter: RetenoFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol RetenoFlutterApiProtocol {
  func onNotificationReceived(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onNotificationClicked(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onInAppMessageStatusChanged(status statusArg: NativeInAppMessageStatus, action actionArg: NativeInAppMessageAction?, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class RetenoFlutterApi: RetenoFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return RetenoFlutterApiCodec.shared
  }
  func onNotificationReceived(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([payloadArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNotificationClicked(payload payloadArg: [String: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([payloadArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onInAppMessageStatusChanged(status statusArg: NativeInAppMessageStatus, action actionArg: NativeInAppMessageAction?, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg.rawValue, actionArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
