// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum NativeInAppMessageStatus {
  inAppShouldBeDisplayed,
  inAppIsDisplayed,
  inAppShouldBeClosed,
  inAppIsClosed,
  inAppReceivedError,
}

enum NativeRecomEventType {
  impression,
  click,
}

class NativeRetenoUser {
  NativeRetenoUser({
    this.userAttributes,
    this.subscriptionKeys,
    this.groupNamesInclude,
    this.groupNamesExclude,
  });

  NativeUserAttributes? userAttributes;

  List<String?>? subscriptionKeys;

  List<String?>? groupNamesInclude;

  List<String?>? groupNamesExclude;

  List<Object?> _toList() {
    return <Object?>[
      userAttributes,
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeRetenoUser decode(Object result) {
    result as List<Object?>;
    return NativeRetenoUser(
      userAttributes: result[0] as NativeUserAttributes?,
      subscriptionKeys: (result[1] as List<Object?>?)?.cast<String?>(),
      groupNamesInclude: (result[2] as List<Object?>?)?.cast<String?>(),
      groupNamesExclude: (result[3] as List<Object?>?)?.cast<String?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeRetenoUser || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeUserAttributes {
  NativeUserAttributes({
    this.phone,
    this.email,
    this.firstName,
    this.lastName,
    this.languageCode,
    this.timeZone,
    this.address,
    this.fields,
  });

  String? phone;

  String? email;

  String? firstName;

  String? lastName;

  String? languageCode;

  String? timeZone;

  NativeAddress? address;

  List<NativeUserCustomField?>? fields;

  List<Object?> _toList() {
    return <Object?>[
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeUserAttributes decode(Object result) {
    result as List<Object?>;
    return NativeUserAttributes(
      phone: result[0] as String?,
      email: result[1] as String?,
      firstName: result[2] as String?,
      lastName: result[3] as String?,
      languageCode: result[4] as String?,
      timeZone: result[5] as String?,
      address: result[6] as NativeAddress?,
      fields: (result[7] as List<Object?>?)?.cast<NativeUserCustomField?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeUserAttributes || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeAddress {
  NativeAddress({
    this.region,
    this.town,
    this.address,
    this.postcode,
  });

  String? region;

  String? town;

  String? address;

  String? postcode;

  List<Object?> _toList() {
    return <Object?>[
      region,
      town,
      address,
      postcode,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeAddress decode(Object result) {
    result as List<Object?>;
    return NativeAddress(
      region: result[0] as String?,
      town: result[1] as String?,
      address: result[2] as String?,
      postcode: result[3] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAddress || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeUserCustomField {
  NativeUserCustomField({
    required this.key,
    this.value,
  });

  String key;

  String? value;

  List<Object?> _toList() {
    return <Object?>[
      key,
      value,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeUserCustomField decode(Object result) {
    result as List<Object?>;
    return NativeUserCustomField(
      key: result[0]! as String,
      value: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeUserCustomField || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeAnonymousUserAttributes {
  NativeAnonymousUserAttributes({
    this.firstName,
    this.lastName,
    this.languageCode,
    this.timeZone,
    this.address,
    this.fields,
  });

  String? firstName;

  String? lastName;

  String? languageCode;

  String? timeZone;

  NativeAddress? address;

  List<NativeUserCustomField?>? fields;

  List<Object?> _toList() {
    return <Object?>[
      firstName,
      lastName,
      languageCode,
      timeZone,
      address,
      fields,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeAnonymousUserAttributes decode(Object result) {
    result as List<Object?>;
    return NativeAnonymousUserAttributes(
      firstName: result[0] as String?,
      lastName: result[1] as String?,
      languageCode: result[2] as String?,
      timeZone: result[3] as String?,
      address: result[4] as NativeAddress?,
      fields: (result[5] as List<Object?>?)?.cast<NativeUserCustomField?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAnonymousUserAttributes || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeCustomEvent {
  NativeCustomEvent({
    required this.eventTypeKey,
    required this.dateOccurred,
    required this.parameters,
    this.forcePush = false,
  });

  String eventTypeKey;

  String dateOccurred;

  List<NativeCustomEventParameter?> parameters;

  bool forcePush;

  List<Object?> _toList() {
    return <Object?>[
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeCustomEvent decode(Object result) {
    result as List<Object?>;
    return NativeCustomEvent(
      eventTypeKey: result[0]! as String,
      dateOccurred: result[1]! as String,
      parameters: (result[2] as List<Object?>?)!.cast<NativeCustomEventParameter?>(),
      forcePush: result[3]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeCustomEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeCustomEventParameter {
  NativeCustomEventParameter({
    required this.name,
    this.value,
  });

  String name;

  String? value;

  List<Object?> _toList() {
    return <Object?>[
      name,
      value,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeCustomEventParameter decode(Object result) {
    result as List<Object?>;
    return NativeCustomEventParameter(
      name: result[0]! as String,
      value: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeCustomEventParameter || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeInAppMessageAction {
  NativeInAppMessageAction({
    required this.isCloseButtonClicked,
    required this.isButtonClicked,
    required this.isOpenUrlClicked,
  });

  bool isCloseButtonClicked;

  bool isButtonClicked;

  bool isOpenUrlClicked;

  List<Object?> _toList() {
    return <Object?>[
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeInAppMessageAction decode(Object result) {
    result as List<Object?>;
    return NativeInAppMessageAction(
      isCloseButtonClicked: result[0]! as bool,
      isButtonClicked: result[1]! as bool,
      isOpenUrlClicked: result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeInAppMessageAction || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeRecomFilter {
  NativeRecomFilter({
    required this.name,
    required this.values,
  });

  String name;

  List<String?> values;

  List<Object?> _toList() {
    return <Object?>[
      name,
      values,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeRecomFilter decode(Object result) {
    result as List<Object?>;
    return NativeRecomFilter(
      name: result[0]! as String,
      values: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeRecomFilter || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeRecommendation {
  NativeRecommendation({
    required this.productId,
    this.name,
    this.description,
    this.imageUrl,
    this.price,
    this.category,
    this.categoryAncestor,
    this.categoryLayout,
    this.categoryParent,
    this.dateCreatedAs,
    this.dateCreatedEs,
    this.dateModifiedAs,
    this.itemGroup,
    this.nameKeyword,
    this.productIdAlt,
    this.tagsAllCategoryNames,
    this.tagsBestseller,
    this.tagsCashback,
    this.tagsCategoryBestseller,
    this.tagsCredit,
    this.tagsDelivery,
    this.tagsDescriptionPriceRange,
    this.tagsDiscount,
    this.tagsHasPurchases21Days,
    this.tagsIsBestseller,
    this.tagsIsBestsellerByCategories,
    this.tagsItemGroupId,
    this.tagsNumPurchases21Days,
    this.tagsOldPrice,
    this.tagsOldprice,
    this.tagsPriceRange,
    this.tagsRating,
    this.tagsSale,
    this.url,
  });

  String productId;

  String? name;

  String? description;

  String? imageUrl;

  double? price;

  List<String>? category;

  List<String>? categoryAncestor;

  List<String>? categoryLayout;

  List<String>? categoryParent;

  String? dateCreatedAs;

  String? dateCreatedEs;

  String? dateModifiedAs;

  String? itemGroup;

  String? nameKeyword;

  String? productIdAlt;

  String? tagsAllCategoryNames;

  String? tagsBestseller;

  String? tagsCashback;

  String? tagsCategoryBestseller;

  String? tagsCredit;

  String? tagsDelivery;

  String? tagsDescriptionPriceRange;

  String? tagsDiscount;

  String? tagsHasPurchases21Days;

  String? tagsIsBestseller;

  String? tagsIsBestsellerByCategories;

  String? tagsItemGroupId;

  String? tagsNumPurchases21Days;

  String? tagsOldPrice;

  String? tagsOldprice;

  String? tagsPriceRange;

  String? tagsRating;

  String? tagsSale;

  String? url;

  List<Object?> _toList() {
    return <Object?>[
      productId,
      name,
      description,
      imageUrl,
      price,
      category,
      categoryAncestor,
      categoryLayout,
      categoryParent,
      dateCreatedAs,
      dateCreatedEs,
      dateModifiedAs,
      itemGroup,
      nameKeyword,
      productIdAlt,
      tagsAllCategoryNames,
      tagsBestseller,
      tagsCashback,
      tagsCategoryBestseller,
      tagsCredit,
      tagsDelivery,
      tagsDescriptionPriceRange,
      tagsDiscount,
      tagsHasPurchases21Days,
      tagsIsBestseller,
      tagsIsBestsellerByCategories,
      tagsItemGroupId,
      tagsNumPurchases21Days,
      tagsOldPrice,
      tagsOldprice,
      tagsPriceRange,
      tagsRating,
      tagsSale,
      url,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeRecommendation decode(Object result) {
    result as List<Object?>;
    return NativeRecommendation(
      productId: result[0]! as String,
      name: result[1] as String?,
      description: result[2] as String?,
      imageUrl: result[3] as String?,
      price: result[4] as double?,
      category: (result[5] as List<Object?>?)?.cast<String>(),
      categoryAncestor: (result[6] as List<Object?>?)?.cast<String>(),
      categoryLayout: (result[7] as List<Object?>?)?.cast<String>(),
      categoryParent: (result[8] as List<Object?>?)?.cast<String>(),
      dateCreatedAs: result[9] as String?,
      dateCreatedEs: result[10] as String?,
      dateModifiedAs: result[11] as String?,
      itemGroup: result[12] as String?,
      nameKeyword: result[13] as String?,
      productIdAlt: result[14] as String?,
      tagsAllCategoryNames: result[15] as String?,
      tagsBestseller: result[16] as String?,
      tagsCashback: result[17] as String?,
      tagsCategoryBestseller: result[18] as String?,
      tagsCredit: result[19] as String?,
      tagsDelivery: result[20] as String?,
      tagsDescriptionPriceRange: result[21] as String?,
      tagsDiscount: result[22] as String?,
      tagsHasPurchases21Days: result[23] as String?,
      tagsIsBestseller: result[24] as String?,
      tagsIsBestsellerByCategories: result[25] as String?,
      tagsItemGroupId: result[26] as String?,
      tagsNumPurchases21Days: result[27] as String?,
      tagsOldPrice: result[28] as String?,
      tagsOldprice: result[29] as String?,
      tagsPriceRange: result[30] as String?,
      tagsRating: result[31] as String?,
      tagsSale: result[32] as String?,
      url: result[33] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeRecommendation || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeRecomEvent {
  NativeRecomEvent({
    required this.eventType,
    required this.dateOccurred,
    required this.productId,
  });

  NativeRecomEventType eventType;

  String dateOccurred;

  String productId;

  List<Object?> _toList() {
    return <Object?>[
      eventType,
      dateOccurred,
      productId,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeRecomEvent decode(Object result) {
    result as List<Object?>;
    return NativeRecomEvent(
      eventType: result[0]! as NativeRecomEventType,
      dateOccurred: result[1]! as String,
      productId: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeRecomEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeRecomEvents {
  NativeRecomEvents({
    required this.recomVariantId,
    required this.events,
  });

  String recomVariantId;

  List<NativeRecomEvent?> events;

  List<Object?> _toList() {
    return <Object?>[
      recomVariantId,
      events,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeRecomEvents decode(Object result) {
    result as List<Object?>;
    return NativeRecomEvents(
      recomVariantId: result[0]! as String,
      events: (result[1] as List<Object?>?)!.cast<NativeRecomEvent?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeRecomEvents || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeLifecycleTrackingOptions {
  NativeLifecycleTrackingOptions({
    required this.appLifecycleEnabled,
    required this.pushSubscriptionEnabled,
    required this.sessionEventsEnabled,
  });

  bool appLifecycleEnabled;

  bool pushSubscriptionEnabled;

  bool sessionEventsEnabled;

  List<Object?> _toList() {
    return <Object?>[
      appLifecycleEnabled,
      pushSubscriptionEnabled,
      sessionEventsEnabled,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeLifecycleTrackingOptions decode(Object result) {
    result as List<Object?>;
    return NativeLifecycleTrackingOptions(
      appLifecycleEnabled: result[0]! as bool,
      pushSubscriptionEnabled: result[1]! as bool,
      sessionEventsEnabled: result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeLifecycleTrackingOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeAppInboxMessages {
  NativeAppInboxMessages({
    required this.messages,
    required this.totalPages,
  });

  List<NativeAppInboxMessage?> messages;

  int totalPages;

  List<Object?> _toList() {
    return <Object?>[
      messages,
      totalPages,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeAppInboxMessages decode(Object result) {
    result as List<Object?>;
    return NativeAppInboxMessages(
      messages: (result[0] as List<Object?>?)!.cast<NativeAppInboxMessage?>(),
      totalPages: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAppInboxMessages || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeAppInboxMessage {
  NativeAppInboxMessage({
    required this.id,
    required this.title,
    required this.createdDate,
    required this.isNewMessage,
    this.content,
    this.imageUrl,
    this.linkUrl,
    this.category,
    this.customData,
  });

  String id;

  String title;

  String createdDate;

  bool isNewMessage;

  String? content;

  String? imageUrl;

  String? linkUrl;

  String? category;

  Map<String?, Object?>? customData;

  List<Object?> _toList() {
    return <Object?>[
      id,
      title,
      createdDate,
      isNewMessage,
      content,
      imageUrl,
      linkUrl,
      category,
      customData,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeAppInboxMessage decode(Object result) {
    result as List<Object?>;
    return NativeAppInboxMessage(
      id: result[0]! as String,
      title: result[1]! as String,
      createdDate: result[2]! as String,
      isNewMessage: result[3]! as bool,
      content: result[4] as String?,
      imageUrl: result[5] as String?,
      linkUrl: result[6] as String?,
      category: result[7] as String?,
      customData: (result[8] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAppInboxMessage || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeUserNotificationAction {
  NativeUserNotificationAction({
    this.actionId,
    this.customData,
    this.link,
  });

  String? actionId;

  Map<String?, Object?>? customData;

  String? link;

  List<Object?> _toList() {
    return <Object?>[
      actionId,
      customData,
      link,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeUserNotificationAction decode(Object result) {
    result as List<Object?>;
    return NativeUserNotificationAction(
      actionId: result[0] as String?,
      customData: (result[1] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      link: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeUserNotificationAction || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeEcommerceProduct {
  NativeEcommerceProduct({
    required this.productId,
    required this.price,
    required this.inStock,
    this.attributes,
  });

  String productId;

  double price;

  bool inStock;

  Map<String?, List<String>?>? attributes;

  List<Object?> _toList() {
    return <Object?>[
      productId,
      price,
      inStock,
      attributes,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeEcommerceProduct decode(Object result) {
    result as List<Object?>;
    return NativeEcommerceProduct(
      productId: result[0]! as String,
      price: result[1]! as double,
      inStock: result[2]! as bool,
      attributes: (result[3] as Map<Object?, Object?>?)?.cast<String?, List<String>?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeEcommerceProduct || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeEcommerceCategory {
  NativeEcommerceCategory({
    required this.productCategoryId,
    this.attributes,
  });

  String productCategoryId;

  Map<String?, List<String>?>? attributes;

  List<Object?> _toList() {
    return <Object?>[
      productCategoryId,
      attributes,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeEcommerceCategory decode(Object result) {
    result as List<Object?>;
    return NativeEcommerceCategory(
      productCategoryId: result[0]! as String,
      attributes: (result[1] as Map<Object?, Object?>?)?.cast<String?, List<String>?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeEcommerceCategory || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeEcommerceProductInCart {
  NativeEcommerceProductInCart({
    required this.productId,
    required this.price,
    required this.quantity,
    this.discount,
    this.name,
    this.category,
    this.attributes,
  });

  String productId;

  double price;

  int quantity;

  double? discount;

  String? name;

  String? category;

  Map<String?, List<String>?>? attributes;

  List<Object?> _toList() {
    return <Object?>[
      productId,
      price,
      quantity,
      discount,
      name,
      category,
      attributes,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeEcommerceProductInCart decode(Object result) {
    result as List<Object?>;
    return NativeEcommerceProductInCart(
      productId: result[0]! as String,
      price: result[1]! as double,
      quantity: result[2]! as int,
      discount: result[3] as double?,
      name: result[4] as String?,
      category: result[5] as String?,
      attributes: (result[6] as Map<Object?, Object?>?)?.cast<String?, List<String>?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeEcommerceProductInCart || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeEcommerceItem {
  NativeEcommerceItem({
    required this.externalItemId,
    required this.name,
    required this.category,
    required this.quantity,
    required this.cost,
    required this.url,
    this.imageUrl,
    this.description,
  });

  String externalItemId;

  String name;

  String category;

  double quantity;

  double cost;

  String url;

  String? imageUrl;

  String? description;

  List<Object?> _toList() {
    return <Object?>[
      externalItemId,
      name,
      category,
      quantity,
      cost,
      url,
      imageUrl,
      description,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeEcommerceItem decode(Object result) {
    result as List<Object?>;
    return NativeEcommerceItem(
      externalItemId: result[0]! as String,
      name: result[1]! as String,
      category: result[2]! as String,
      quantity: result[3]! as double,
      cost: result[4]! as double,
      url: result[5]! as String,
      imageUrl: result[6] as String?,
      description: result[7] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeEcommerceItem || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NativeEcommerceOrder {
  NativeEcommerceOrder({
    required this.externalOrderId,
    required this.totalCost,
    required this.status,
    required this.date,
    this.cartId,
    this.email,
    this.phone,
    this.firstName,
    this.lastName,
    this.shipping,
    this.discount,
    this.taxes,
    this.restoreUrl,
    this.statusDescription,
    this.storeId,
    this.source,
    this.deliveryMethod,
    this.paymentMethod,
    this.deliveryAddress,
    this.items,
    this.attributes,
  });

  String externalOrderId;

  double totalCost;

  String status;

  String date;

  String? cartId;

  String? email;

  String? phone;

  String? firstName;

  String? lastName;

  double? shipping;

  double? discount;

  double? taxes;

  String? restoreUrl;

  String? statusDescription;

  String? storeId;

  String? source;

  String? deliveryMethod;

  String? paymentMethod;

  String? deliveryAddress;

  List<NativeEcommerceItem?>? items;

  Map<String?, List<String>?>? attributes;

  List<Object?> _toList() {
    return <Object?>[
      externalOrderId,
      totalCost,
      status,
      date,
      cartId,
      email,
      phone,
      firstName,
      lastName,
      shipping,
      discount,
      taxes,
      restoreUrl,
      statusDescription,
      storeId,
      source,
      deliveryMethod,
      paymentMethod,
      deliveryAddress,
      items,
      attributes,
    ];
  }

  Object encode() {
    return _toList();  }

  static NativeEcommerceOrder decode(Object result) {
    result as List<Object?>;
    return NativeEcommerceOrder(
      externalOrderId: result[0]! as String,
      totalCost: result[1]! as double,
      status: result[2]! as String,
      date: result[3]! as String,
      cartId: result[4] as String?,
      email: result[5] as String?,
      phone: result[6] as String?,
      firstName: result[7] as String?,
      lastName: result[8] as String?,
      shipping: result[9] as double?,
      discount: result[10] as double?,
      taxes: result[11] as double?,
      restoreUrl: result[12] as String?,
      statusDescription: result[13] as String?,
      storeId: result[14] as String?,
      source: result[15] as String?,
      deliveryMethod: result[16] as String?,
      paymentMethod: result[17] as String?,
      deliveryAddress: result[18] as String?,
      items: (result[19] as List<Object?>?)?.cast<NativeEcommerceItem?>(),
      attributes: (result[20] as Map<Object?, Object?>?)?.cast<String?, List<String>?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeEcommerceOrder || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is NativeInAppMessageStatus) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is NativeRecomEventType) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is NativeRetenoUser) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is NativeUserAttributes) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is NativeAddress) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is NativeUserCustomField) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is NativeAnonymousUserAttributes) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is NativeCustomEvent) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is NativeCustomEventParameter) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is NativeInAppMessageAction) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is NativeRecomFilter) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is NativeRecommendation) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is NativeRecomEvent) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is NativeRecomEvents) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is NativeLifecycleTrackingOptions) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is NativeAppInboxMessages) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is NativeAppInboxMessage) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is NativeUserNotificationAction) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is NativeEcommerceProduct) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is NativeEcommerceCategory) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is NativeEcommerceProductInCart) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is NativeEcommerceItem) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is NativeEcommerceOrder) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NativeInAppMessageStatus.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NativeRecomEventType.values[value];
      case 131: 
        return NativeRetenoUser.decode(readValue(buffer)!);
      case 132: 
        return NativeUserAttributes.decode(readValue(buffer)!);
      case 133: 
        return NativeAddress.decode(readValue(buffer)!);
      case 134: 
        return NativeUserCustomField.decode(readValue(buffer)!);
      case 135: 
        return NativeAnonymousUserAttributes.decode(readValue(buffer)!);
      case 136: 
        return NativeCustomEvent.decode(readValue(buffer)!);
      case 137: 
        return NativeCustomEventParameter.decode(readValue(buffer)!);
      case 138: 
        return NativeInAppMessageAction.decode(readValue(buffer)!);
      case 139: 
        return NativeRecomFilter.decode(readValue(buffer)!);
      case 140: 
        return NativeRecommendation.decode(readValue(buffer)!);
      case 141: 
        return NativeRecomEvent.decode(readValue(buffer)!);
      case 142: 
        return NativeRecomEvents.decode(readValue(buffer)!);
      case 143: 
        return NativeLifecycleTrackingOptions.decode(readValue(buffer)!);
      case 144: 
        return NativeAppInboxMessages.decode(readValue(buffer)!);
      case 145: 
        return NativeAppInboxMessage.decode(readValue(buffer)!);
      case 146: 
        return NativeUserNotificationAction.decode(readValue(buffer)!);
      case 147: 
        return NativeEcommerceProduct.decode(readValue(buffer)!);
      case 148: 
        return NativeEcommerceCategory.decode(readValue(buffer)!);
      case 149: 
        return NativeEcommerceProductInCart.decode(readValue(buffer)!);
      case 150: 
        return NativeEcommerceItem.decode(readValue(buffer)!);
      case 151: 
        return NativeEcommerceOrder.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class RetenoHostApi {
  /// Constructor for [RetenoHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RetenoHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initWith({required String accessKey, NativeLifecycleTrackingOptions? lifecycleTrackingOptions, bool isPausedInAppMessages = false, bool useCustomDeviceIdProvider = false, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.initWith$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[accessKey, lifecycleTrackingOptions, isPausedInAppMessages, useCustomDeviceIdProvider]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUserAttributes(String externalUserId, NativeRetenoUser? user) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[externalUserId, user]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAnonymousUserAttributes(NativeAnonymousUserAttributes anonymousUserAttributes) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anonymousUserAttributes]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEvent(NativeCustomEvent event) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[event]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePushPermissionStatus() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pauseInAppMessages(bool isPaused) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[isPaused]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String, Object>?> getInitialNotification() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String, Object>();
    }
  }

  Future<List<NativeRecommendation>> getRecommendations({required String recomVariantId, required List<String> productIds, String? categoryId, List<NativeRecomFilter>? filters, List<String>? fields, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getRecommendations$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[recomVariantId, productIds, categoryId, filters, fields]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NativeRecommendation>();
    }
  }

  Future<void> logRecommendationsEvent(NativeRecomEvents events) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logRecommendationsEvent$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[events]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeAppInboxMessages> getAppInboxMessages({int? page, int? pageSize}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[page, pageSize]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NativeAppInboxMessages?)!;
    }
  }

  Future<int> getAppInboxMessagesCount() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessagesCount$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<void> markAsOpened(String messageId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAsOpened$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[messageId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> markAllMessagesAsOpened() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAllMessagesAsOpened$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> subscribeOnMessagesCountChanged() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.subscribeOnMessagesCountChanged$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unsubscribeAllMessagesCountChanged() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.unsubscribeAllMessagesCountChanged$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceProductViewed(NativeEcommerceProduct product, String? currency) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductViewed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[product, currency]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceProductCategoryViewed(NativeEcommerceCategory category) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductCategoryViewed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[category]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceProductAddedToWishlist(NativeEcommerceProduct product, String? currency) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceProductAddedToWishlist$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[product, currency]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceCartUpdated(String cartId, List<NativeEcommerceProductInCart> products, String? currency) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceCartUpdated$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[cartId, products, currency]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceOrderCreated(NativeEcommerceOrder order, String? currency) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCreated$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[order, currency]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceOrderUpdated(NativeEcommerceOrder order, String? currency) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderUpdated$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[order, currency]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceOrderDelivered(String externalOrderId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderDelivered$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[externalOrderId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceOrderCancelled(String externalOrderId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceOrderCancelled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[externalOrderId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEcommerceSearchRequest(String query, bool? isFound) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEcommerceSearchRequest$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[query, isFound]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class RetenoFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onNotificationReceived(Map<String, Object?> payload);

  void onNotificationClicked(Map<String, Object?> payload);

  void onNotificationActionHandler(NativeUserNotificationAction action);

  void onInAppMessageStatusChanged(NativeInAppMessageStatus status, NativeInAppMessageAction? action, String? error);

  void onMessagesCountChanged(int count);

  Future<String?> getDeviceId();

  static void setUp(RetenoFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_payload = (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_payload != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived was null, expected non-null Map<String, Object?>.');
          try {
            api.onNotificationReceived(arg_payload!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_payload = (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_payload != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked was null, expected non-null Map<String, Object?>.');
          try {
            api.onNotificationClicked(arg_payload!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeUserNotificationAction? arg_action = (args[0] as NativeUserNotificationAction?);
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler was null, expected non-null NativeUserNotificationAction.');
          try {
            api.onNotificationActionHandler(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeInAppMessageStatus? arg_status = (args[0] as NativeInAppMessageStatus?);
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged was null, expected non-null NativeInAppMessageStatus.');
          final NativeInAppMessageAction? arg_action = (args[1] as NativeInAppMessageAction?);
          final String? arg_error = (args[2] as String?);
          try {
            api.onInAppMessageStatusChanged(arg_status!, arg_action, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_count = (args[0] as int?);
          assert(arg_count != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged was null, expected non-null int.');
          try {
            api.onMessagesCountChanged(arg_count!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.getDeviceId$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final String? output = await api.getDeviceId();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
