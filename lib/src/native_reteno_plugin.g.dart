// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum NativeInAppMessageStatus {
  inAppShouldBeDisplayed,
  inAppIsDisplayed,
  inAppShouldBeClosed,
  inAppIsClosed,
  inAppReceivedError,
}

enum NativeRecomEventType {
  impression,
  click,
}

class NativeRetenoUser {
  NativeRetenoUser({
    this.userAttributes,
    this.subscriptionKeys,
    this.groupNamesInclude,
    this.groupNamesExclude,
  });

  NativeUserAttributes? userAttributes;

  List<String?>? subscriptionKeys;

  List<String?>? groupNamesInclude;

  List<String?>? groupNamesExclude;

  Object encode() {
    return <Object?>[
      userAttributes?.encode(),
      subscriptionKeys,
      groupNamesInclude,
      groupNamesExclude,
    ];
  }

  static NativeRetenoUser decode(Object result) {
    result as List<Object?>;
    return NativeRetenoUser(
      userAttributes: result[0] != null
          ? NativeUserAttributes.decode(result[0]! as List<Object?>)
          : null,
      subscriptionKeys: (result[1] as List<Object?>?)?.cast<String?>(),
      groupNamesInclude: (result[2] as List<Object?>?)?.cast<String?>(),
      groupNamesExclude: (result[3] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class NativeUserAttributes {
  NativeUserAttributes({
    this.phone,
    this.email,
    this.firstName,
    this.lastName,
    this.languageCode,
    this.timeZone,
    this.address,
    this.fields,
  });

  String? phone;

  String? email;

  String? firstName;

  String? lastName;

  String? languageCode;

  String? timeZone;

  NativeAddress? address;

  List<NativeUserCustomField?>? fields;

  Object encode() {
    return <Object?>[
      phone,
      email,
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.encode(),
      fields,
    ];
  }

  static NativeUserAttributes decode(Object result) {
    result as List<Object?>;
    return NativeUserAttributes(
      phone: result[0] as String?,
      email: result[1] as String?,
      firstName: result[2] as String?,
      lastName: result[3] as String?,
      languageCode: result[4] as String?,
      timeZone: result[5] as String?,
      address: result[6] != null
          ? NativeAddress.decode(result[6]! as List<Object?>)
          : null,
      fields: (result[7] as List<Object?>?)?.cast<NativeUserCustomField?>(),
    );
  }
}

class NativeAddress {
  NativeAddress({
    this.region,
    this.town,
    this.address,
    this.postcode,
  });

  String? region;

  String? town;

  String? address;

  String? postcode;

  Object encode() {
    return <Object?>[
      region,
      town,
      address,
      postcode,
    ];
  }

  static NativeAddress decode(Object result) {
    result as List<Object?>;
    return NativeAddress(
      region: result[0] as String?,
      town: result[1] as String?,
      address: result[2] as String?,
      postcode: result[3] as String?,
    );
  }
}

class NativeUserCustomField {
  NativeUserCustomField({
    required this.key,
    this.value,
  });

  String key;

  String? value;

  Object encode() {
    return <Object?>[
      key,
      value,
    ];
  }

  static NativeUserCustomField decode(Object result) {
    result as List<Object?>;
    return NativeUserCustomField(
      key: result[0]! as String,
      value: result[1] as String?,
    );
  }
}

class NativeAnonymousUserAttributes {
  NativeAnonymousUserAttributes({
    this.firstName,
    this.lastName,
    this.languageCode,
    this.timeZone,
    this.address,
    this.fields,
  });

  String? firstName;

  String? lastName;

  String? languageCode;

  String? timeZone;

  NativeAddress? address;

  List<NativeUserCustomField?>? fields;

  Object encode() {
    return <Object?>[
      firstName,
      lastName,
      languageCode,
      timeZone,
      address?.encode(),
      fields,
    ];
  }

  static NativeAnonymousUserAttributes decode(Object result) {
    result as List<Object?>;
    return NativeAnonymousUserAttributes(
      firstName: result[0] as String?,
      lastName: result[1] as String?,
      languageCode: result[2] as String?,
      timeZone: result[3] as String?,
      address: result[4] != null
          ? NativeAddress.decode(result[4]! as List<Object?>)
          : null,
      fields: (result[5] as List<Object?>?)?.cast<NativeUserCustomField?>(),
    );
  }
}

class NativeCustomEvent {
  NativeCustomEvent({
    required this.eventTypeKey,
    required this.dateOccurred,
    required this.parameters,
    this.forcePush = false,
  });

  String eventTypeKey;

  String dateOccurred;

  List<NativeCustomEventParameter?> parameters;

  bool forcePush;

  Object encode() {
    return <Object?>[
      eventTypeKey,
      dateOccurred,
      parameters,
      forcePush,
    ];
  }

  static NativeCustomEvent decode(Object result) {
    result as List<Object?>;
    return NativeCustomEvent(
      eventTypeKey: result[0]! as String,
      dateOccurred: result[1]! as String,
      parameters: (result[2] as List<Object?>?)!.cast<NativeCustomEventParameter?>(),
      forcePush: result[3]! as bool,
    );
  }
}

class NativeCustomEventParameter {
  NativeCustomEventParameter({
    required this.name,
    this.value,
  });

  String name;

  String? value;

  Object encode() {
    return <Object?>[
      name,
      value,
    ];
  }

  static NativeCustomEventParameter decode(Object result) {
    result as List<Object?>;
    return NativeCustomEventParameter(
      name: result[0]! as String,
      value: result[1] as String?,
    );
  }
}

class NativeInAppMessageAction {
  NativeInAppMessageAction({
    required this.isCloseButtonClicked,
    required this.isButtonClicked,
    required this.isOpenUrlClicked,
  });

  bool isCloseButtonClicked;

  bool isButtonClicked;

  bool isOpenUrlClicked;

  Object encode() {
    return <Object?>[
      isCloseButtonClicked,
      isButtonClicked,
      isOpenUrlClicked,
    ];
  }

  static NativeInAppMessageAction decode(Object result) {
    result as List<Object?>;
    return NativeInAppMessageAction(
      isCloseButtonClicked: result[0]! as bool,
      isButtonClicked: result[1]! as bool,
      isOpenUrlClicked: result[2]! as bool,
    );
  }
}

class NativeRecomFilter {
  NativeRecomFilter({
    required this.name,
    required this.values,
  });

  String name;

  List<String?> values;

  Object encode() {
    return <Object?>[
      name,
      values,
    ];
  }

  static NativeRecomFilter decode(Object result) {
    result as List<Object?>;
    return NativeRecomFilter(
      name: result[0]! as String,
      values: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class NativeRecommendation {
  NativeRecommendation({
    required this.productId,
    this.name,
    this.description,
    this.imageUrl,
    this.price,
  });

  String productId;

  String? name;

  String? description;

  String? imageUrl;

  double? price;

  Object encode() {
    return <Object?>[
      productId,
      name,
      description,
      imageUrl,
      price,
    ];
  }

  static NativeRecommendation decode(Object result) {
    result as List<Object?>;
    return NativeRecommendation(
      productId: result[0]! as String,
      name: result[1] as String?,
      description: result[2] as String?,
      imageUrl: result[3] as String?,
      price: result[4] as double?,
    );
  }
}

class NativeRecomEvent {
  NativeRecomEvent({
    required this.eventType,
    required this.dateOccurred,
    required this.productId,
  });

  NativeRecomEventType eventType;

  String dateOccurred;

  String productId;

  Object encode() {
    return <Object?>[
      eventType.index,
      dateOccurred,
      productId,
    ];
  }

  static NativeRecomEvent decode(Object result) {
    result as List<Object?>;
    return NativeRecomEvent(
      eventType: NativeRecomEventType.values[result[0]! as int],
      dateOccurred: result[1]! as String,
      productId: result[2]! as String,
    );
  }
}

class NativeRecomEvents {
  NativeRecomEvents({
    required this.recomVariantId,
    required this.events,
  });

  String recomVariantId;

  List<NativeRecomEvent?> events;

  Object encode() {
    return <Object?>[
      recomVariantId,
      events,
    ];
  }

  static NativeRecomEvents decode(Object result) {
    result as List<Object?>;
    return NativeRecomEvents(
      recomVariantId: result[0]! as String,
      events: (result[1] as List<Object?>?)!.cast<NativeRecomEvent?>(),
    );
  }
}

class NativeLifecycleTrackingOptions {
  NativeLifecycleTrackingOptions({
    required this.appLifecycleEnabled,
    required this.pushSubscriptionEnabled,
    required this.sessionEventsEnabled,
  });

  bool appLifecycleEnabled;

  bool pushSubscriptionEnabled;

  bool sessionEventsEnabled;

  Object encode() {
    return <Object?>[
      appLifecycleEnabled,
      pushSubscriptionEnabled,
      sessionEventsEnabled,
    ];
  }

  static NativeLifecycleTrackingOptions decode(Object result) {
    result as List<Object?>;
    return NativeLifecycleTrackingOptions(
      appLifecycleEnabled: result[0]! as bool,
      pushSubscriptionEnabled: result[1]! as bool,
      sessionEventsEnabled: result[2]! as bool,
    );
  }
}

class NativeAppInboxMessages {
  NativeAppInboxMessages({
    required this.messages,
    required this.totalPages,
  });

  List<NativeAppInboxMessage?> messages;

  int totalPages;

  Object encode() {
    return <Object?>[
      messages,
      totalPages,
    ];
  }

  static NativeAppInboxMessages decode(Object result) {
    result as List<Object?>;
    return NativeAppInboxMessages(
      messages: (result[0] as List<Object?>?)!.cast<NativeAppInboxMessage?>(),
      totalPages: result[1]! as int,
    );
  }
}

class NativeAppInboxMessage {
  NativeAppInboxMessage({
    required this.id,
    required this.title,
    required this.createdDate,
    required this.isNewMessage,
    this.content,
    this.imageUrl,
    this.linkUrl,
    this.category,
  });

  String id;

  String title;

  String createdDate;

  bool isNewMessage;

  String? content;

  String? imageUrl;

  String? linkUrl;

  String? category;

  Object encode() {
    return <Object?>[
      id,
      title,
      createdDate,
      isNewMessage,
      content,
      imageUrl,
      linkUrl,
      category,
    ];
  }

  static NativeAppInboxMessage decode(Object result) {
    result as List<Object?>;
    return NativeAppInboxMessage(
      id: result[0]! as String,
      title: result[1]! as String,
      createdDate: result[2]! as String,
      isNewMessage: result[3]! as bool,
      content: result[4] as String?,
      imageUrl: result[5] as String?,
      linkUrl: result[6] as String?,
      category: result[7] as String?,
    );
  }
}

class NativeUserNotificationAction {
  NativeUserNotificationAction({
    this.actionId,
    this.customData,
    this.link,
  });

  String? actionId;

  Map<String?, Object?>? customData;

  String? link;

  Object encode() {
    return <Object?>[
      actionId,
      customData,
      link,
    ];
  }

  static NativeUserNotificationAction decode(Object result) {
    result as List<Object?>;
    return NativeUserNotificationAction(
      actionId: result[0] as String?,
      customData: (result[1] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      link: result[2] as String?,
    );
  }
}

class _RetenoHostApiCodec extends StandardMessageCodec {
  const _RetenoHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAddress) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAnonymousUserAttributes) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeAppInboxMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeAppInboxMessages) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeCustomEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NativeCustomEventParameter) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeInAppMessageAction) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is NativeLifecycleTrackingOptions) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomEvent) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomEvents) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomFilter) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecommendation) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is NativeRetenoUser) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserAttributes) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserCustomField) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserNotificationAction) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAddress.decode(readValue(buffer)!);
      case 129: 
        return NativeAnonymousUserAttributes.decode(readValue(buffer)!);
      case 130: 
        return NativeAppInboxMessage.decode(readValue(buffer)!);
      case 131: 
        return NativeAppInboxMessages.decode(readValue(buffer)!);
      case 132: 
        return NativeCustomEvent.decode(readValue(buffer)!);
      case 133: 
        return NativeCustomEventParameter.decode(readValue(buffer)!);
      case 134: 
        return NativeInAppMessageAction.decode(readValue(buffer)!);
      case 135: 
        return NativeLifecycleTrackingOptions.decode(readValue(buffer)!);
      case 136: 
        return NativeRecomEvent.decode(readValue(buffer)!);
      case 137: 
        return NativeRecomEvents.decode(readValue(buffer)!);
      case 138: 
        return NativeRecomFilter.decode(readValue(buffer)!);
      case 139: 
        return NativeRecommendation.decode(readValue(buffer)!);
      case 140: 
        return NativeRetenoUser.decode(readValue(buffer)!);
      case 141: 
        return NativeUserAttributes.decode(readValue(buffer)!);
      case 142: 
        return NativeUserCustomField.decode(readValue(buffer)!);
      case 143: 
        return NativeUserNotificationAction.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class RetenoHostApi {
  /// Constructor for [RetenoHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RetenoHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _RetenoHostApiCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initWith({required String accessKey, NativeLifecycleTrackingOptions? lifecycleTrackingOptions, bool isPausedInAppMessages = false, bool useCustomDeviceIdProvider = false,}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.initWith$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[accessKey, lifecycleTrackingOptions, isPausedInAppMessages, useCustomDeviceIdProvider]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUserAttributes(String externalUserId, NativeRetenoUser? user) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setUserAttributes$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[externalUserId, user]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAnonymousUserAttributes(NativeAnonymousUserAttributes anonymousUserAttributes) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.setAnonymousUserAttributes$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[anonymousUserAttributes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logEvent(NativeCustomEvent event) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logEvent$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[event]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePushPermissionStatus() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.updatePushPermissionStatus$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pauseInAppMessages(bool isPaused) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.pauseInAppMessages$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[isPaused]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String?, Object?>?> getInitialNotification() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getInitialNotification$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
    }
  }

  Future<List<NativeRecommendation?>> getRecommendations({required String recomVariantId, required List<String?> productIds, required String categoryId, List<NativeRecomFilter?>? filters, List<String?>? fields,}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getRecommendations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[recomVariantId, productIds, categoryId, filters, fields]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<NativeRecommendation?>();
    }
  }

  Future<void> logRecommendationsEvent(NativeRecomEvents events) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.logRecommendationsEvent$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[events]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeAppInboxMessages> getAppInboxMessages({int? page, int? pageSize}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessages$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[page, pageSize]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeAppInboxMessages?)!;
    }
  }

  Future<int> getAppInboxMessagesCount() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.getAppInboxMessagesCount$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> markAsOpened(String messageId) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAsOpened$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[messageId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> markAllMessagesAsOpened() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.markAllMessagesAsOpened$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> subscribeOnMessagesCountChanged() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.subscribeOnMessagesCountChanged$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unsubscribeAllMessagesCountChanged() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.reteno_plugin.RetenoHostApi.unsubscribeAllMessagesCountChanged$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _RetenoFlutterApiCodec extends StandardMessageCodec {
  const _RetenoFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAddress) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAnonymousUserAttributes) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeAppInboxMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeAppInboxMessages) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeCustomEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NativeCustomEventParameter) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeInAppMessageAction) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is NativeLifecycleTrackingOptions) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomEvent) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomEvents) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecomFilter) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is NativeRecommendation) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is NativeRetenoUser) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserAttributes) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserCustomField) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserNotificationAction) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAddress.decode(readValue(buffer)!);
      case 129: 
        return NativeAnonymousUserAttributes.decode(readValue(buffer)!);
      case 130: 
        return NativeAppInboxMessage.decode(readValue(buffer)!);
      case 131: 
        return NativeAppInboxMessages.decode(readValue(buffer)!);
      case 132: 
        return NativeCustomEvent.decode(readValue(buffer)!);
      case 133: 
        return NativeCustomEventParameter.decode(readValue(buffer)!);
      case 134: 
        return NativeInAppMessageAction.decode(readValue(buffer)!);
      case 135: 
        return NativeLifecycleTrackingOptions.decode(readValue(buffer)!);
      case 136: 
        return NativeRecomEvent.decode(readValue(buffer)!);
      case 137: 
        return NativeRecomEvents.decode(readValue(buffer)!);
      case 138: 
        return NativeRecomFilter.decode(readValue(buffer)!);
      case 139: 
        return NativeRecommendation.decode(readValue(buffer)!);
      case 140: 
        return NativeRetenoUser.decode(readValue(buffer)!);
      case 141: 
        return NativeUserAttributes.decode(readValue(buffer)!);
      case 142: 
        return NativeUserCustomField.decode(readValue(buffer)!);
      case 143: 
        return NativeUserNotificationAction.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class RetenoFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _RetenoFlutterApiCodec();

  void onNotificationReceived(Map<String?, Object?> payload);

  void onNotificationClicked(Map<String?, Object?> payload);

  void onNotificationActionHandler(NativeUserNotificationAction action);

  void onInAppMessageStatusChanged(NativeInAppMessageStatus status, NativeInAppMessageAction? action, String? error);

  void onMessagesCountChanged(int count);

  Future<String?> getDeviceId();

  static void setUp(RetenoFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_payload = (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_payload != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationReceived was null, expected non-null Map<String?, Object?>.');
          try {
            api.onNotificationReceived(arg_payload!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_payload = (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_payload != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationClicked was null, expected non-null Map<String?, Object?>.');
          try {
            api.onNotificationClicked(arg_payload!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeUserNotificationAction? arg_action = (args[0] as NativeUserNotificationAction?);
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onNotificationActionHandler was null, expected non-null NativeUserNotificationAction.');
          try {
            api.onNotificationActionHandler(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeInAppMessageStatus? arg_status = args[0] == null ? null : NativeInAppMessageStatus.values[args[0]! as int];
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onInAppMessageStatusChanged was null, expected non-null NativeInAppMessageStatus.');
          final NativeInAppMessageAction? arg_action = (args[1] as NativeInAppMessageAction?);
          final String? arg_error = (args[2] as String?);
          try {
            api.onInAppMessageStatusChanged(arg_status!, arg_action, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_count = (args[0] as int?);
          assert(arg_count != null,
              'Argument for dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.onMessagesCountChanged was null, expected non-null int.');
          try {
            api.onMessagesCountChanged(arg_count!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.reteno_plugin.RetenoFlutterApi.getDeviceId$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            final String? output = await api.getDeviceId();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
